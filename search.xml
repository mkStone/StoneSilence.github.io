<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[招聘分析+源码]]></title>
      <url>/%E6%8B%9B%E8%81%98%E5%88%86%E6%9E%90-%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p>第一次做大数据分析,有点小小的不顺利.不过还好,能出来东西,反正数据大家拿到以后,你们自己也可以做分析.</p>
<h4 id="工资比较高的城市-根据百度招聘信息来分析的"><a href="#工资比较高的城市-根据百度招聘信息来分析的" class="headerlink" title="工资比较高的城市,根据百度招聘信息来分析的."></a>工资比较高的城市,根据百度招聘信息来分析的.</h4><p><img src="http://oypem0qjb.bkt.clouddn.com/101522241033_.pic_hd.jpg" alt=""></p>
<h4 id="根据市场需求分析-开发人员的年限"><a href="#根据市场需求分析-开发人员的年限" class="headerlink" title="根据市场需求分析,开发人员的年限"></a>根据市场需求分析,开发人员的年限</h4><p><img src="http://oypem0qjb.bkt.clouddn.com/111522241035_.pic_hd.jpg" alt=""></p>
<h4 id="市场人才需求分析"><a href="#市场人才需求分析" class="headerlink" title="市场人才需求分析"></a>市场人才需求分析</h4><p><img src="http://oypem0qjb.bkt.clouddn.com/121522241036_.pic_hd.jpg" alt=""></p>
<h4 id="各大城市对开发经验的要求"><a href="#各大城市对开发经验的要求" class="headerlink" title="各大城市对开发经验的要求"></a>各大城市对开发经验的要求</h4><p><img src="http://oypem0qjb.bkt.clouddn.com/131522241036_.pic_hd.jpg" alt=""></p>
<h2 id="数据爬取-源码"><a href="#数据爬取-源码" class="headerlink" title="数据爬取,源码"></a>数据爬取,源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDate</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JSONException </span>&#123;</div><div class="line">		String srr[]=&#123;<span class="string">"北京"</span>,<span class="string">"上海"</span>,<span class="string">"广州"</span>,<span class="string">"天津"</span>,<span class="string">"武汉"</span>,<span class="string">"沈阳"</span>,<span class="string">"哈尔滨"</span>,<span class="string">"西安"</span>,<span class="string">"南京"</span>,<span class="string">"成都"</span>,<span class="string">"重庆 大城市；深圳"</span>,<span class="string">"杭州"</span>,<span class="string">"青岛"</span>,<span class="string">"苏州"</span>,<span class="string">"太原"</span>,<span class="string">"郑州"</span>,<span class="string">"济南"</span>,<span class="string">"长春"</span>,<span class="string">" 合肥"</span>,</div><div class="line">				<span class="string">"长沙"</span>,<span class="string">"南昌"</span>,<span class="string">"无锡"</span>,<span class="string">"昆明"</span>,<span class="string">"宁波"</span>,<span class="string">"福州"</span>,<span class="string">"石家庄 较大的城市；南宁"</span>,<span class="string">"徐州"</span>,<span class="string">"烟台"</span>,<span class="string">"唐山"</span>,<span class="string">"柳州"</span>,<span class="string">"常州"</span>,<span class="string">"鞍山"</span>,<span class="string">"厦门"</span>,<span class="string">"抚顺"</span>,<span class="string">"吉林市"</span>,<span class="string">"洛阳"</span>,<span class="string">"大同"</span>,<span class="string">"包头"</span>,</div><div class="line">				<span class="string">"大庆"</span>,<span class="string">"淄博"</span>,<span class="string">"乌鲁木齐"</span>,<span class="string">"佛山"</span>,<span class="string">"呼和浩特"</span>,<span class="string">"齐齐哈尔"</span>,<span class="string">"泉州"</span>,<span class="string">"西宁"</span>,<span class="string">"兰州"</span>,<span class="string">"贵阳"</span>,<span class="string">"温州"</span>&#125;;</div><div class="line">		String brr[]=&#123;<span class="string">"java"</span>,<span class="string">"python"</span>,<span class="string">"C++"</span>,<span class="string">".NET"</span>,<span class="string">"WEB前端"</span>,<span class="string">"UI设计师"</span>,<span class="string">"Android"</span>,<span class="string">"IOS"</span>,<span class="string">"PHP"</span>,<span class="string">"C"</span>,<span class="string">"C#"</span>,<span class="string">"R"</span>,<span class="string">"Swift"</span>,<span class="string">"GO"</span>,<span class="string">"大数据"</span>&#125;;</div><div class="line">		<span class="comment">//java</span></div><div class="line">		<span class="comment">//String urlX="http://zhaopin.baidu.com/api/quanzhiasync?query=java&amp;sort_type=1&amp;detailmode=close&amp;rn=20&amp;pn=";</span></div><div class="line">		<span class="comment">//python</span></div><div class="line">		<span class="comment">//String urlX="http://zhaopin.baidu.com/api/quanzhiasync?query=python&amp;sort_type=1&amp;detailmode=close&amp;rn=20&amp;pn=";</span></div><div class="line">		<span class="comment">//c++</span></div><div class="line">		String urlX=<span class="string">"http://zhaopin.baidu.com/api/quanzhiasync?sort_type=1&amp;detailmode=close&amp;rn=20&amp;pn="</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; brr.length; d++) &#123;</div><div class="line">			String query=brr[d];</div><div class="line">			System.err.println(query);</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; srr.length; c++) &#123;</div><div class="line">				<span class="comment">//城市列表 city=%E6%9D%AD%E5%B7%9E&amp;</span></div><div class="line">				String city =srr[c];</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">0</span>; j &lt;=<span class="number">740</span>; j+=<span class="number">20</span>) &#123;</div><div class="line">					<span class="keyword">try</span>&#123;</div><div class="line">					String url=urlX+j+<span class="string">"&amp;city="</span>+city+<span class="string">"&amp;query="</span>+query;</div><div class="line">					</div><div class="line">					String json=loadJSON(url);</div><div class="line">					json=jsonJX(json);</div><div class="line">					<span class="comment">//JSONObject jsonObject =new JSONObject(json);</span></div><div class="line">					JSONArray array = <span class="keyword">new</span> JSONArray(json);<span class="comment">//将json字符串转成json数组</span></div><div class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length(); i++) &#123;</div><div class="line">						JSONObject ob  = (JSONObject) array.get(i);<span class="comment">//得到json对象</span></div><div class="line">						insert(ob.toString());</div><div class="line">					&#125;</div><div class="line">					&#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">						System.err.println(<span class="string">".................错误................"</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//存数据库</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String json)</span></span>&#123;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//String jsons=json.substring(1, json.length()-1);</span></div><div class="line">			JSONObject jsonObject =<span class="keyword">new</span> JSONObject(json);</div><div class="line">			String jobfirstclass=jsonObject.getString(<span class="string">"jobfirstclass"</span>);</div><div class="line">			String joblink=jsonObject.getString(<span class="string">"joblink"</span>);</div><div class="line">			String experience=jsonObject.getString(<span class="string">"experience"</span>);</div><div class="line">			String education=jsonObject.getString(<span class="string">"education"</span>);</div><div class="line">			String employertype=jsonObject.getString(<span class="string">"employertype"</span>);</div><div class="line">			String ori_city=jsonObject.getString(<span class="string">"ori_city"</span>);</div><div class="line">			String salary=jsonObject.getString(<span class="string">"salary"</span>);</div><div class="line">			String title=jsonObject.getString(<span class="string">"title"</span>);</div><div class="line">			</div><div class="line">			</div><div class="line">			String sql=<span class="string">"insert into Baidu (jobfirstclass,joblink,experience,education,employertype,ori_city,salary,title) VALUES(?,?,?,?,?,?,?,?)"</span>;</div><div class="line">			Object [] obj=&#123;jobfirstclass,joblink,experience,education,employertype,ori_city,salary,title&#125;;</div><div class="line">			DataSource dataSource = DBUtils.getDataSource();</div><div class="line">			QueryRunner qr = <span class="keyword">new</span> QueryRunner(dataSource);</div><div class="line">		 </div><div class="line">			qr.execute(sql, obj);</div><div class="line">		 &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//salary</span></div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//百度json解析</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">jsonJX</span><span class="params">(String json)</span> <span class="keyword">throws</span> JSONException</span>&#123;</div><div class="line">		JSONObject jsonObject =<span class="keyword">new</span> JSONObject(json);</div><div class="line">		String date2=<span class="keyword">new</span> JSONObject(jsonObject.getString(<span class="string">"data"</span>)).getString(<span class="string">"main"</span>);</div><div class="line">		String Date3=<span class="keyword">new</span> JSONObject(date2).getString(<span class="string">"data"</span>);</div><div class="line">		String BaiduDate=<span class="keyword">new</span> JSONObject(Date3).getString(<span class="string">"disp_data"</span>);</div><div class="line">		System.out.println(BaiduDate);</div><div class="line">		<span class="keyword">return</span> BaiduDate;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//获取Json数据</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">loadJSON</span> <span class="params">(String url)</span> </span>&#123;</div><div class="line">		   StringBuilder json = <span class="keyword">new</span> StringBuilder();</div><div class="line">		    <span class="keyword">try</span> &#123;</div><div class="line">		        URL oracle = <span class="keyword">new</span> URL(url);</div><div class="line">		        URLConnection yc = oracle.openConnection();</div><div class="line">		        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(</div><div class="line">		                                    yc.getInputStream()));</div><div class="line">		       </div><div class="line">		        String inputLine = <span class="keyword">null</span>;</div><div class="line">		        <span class="keyword">while</span> ( (inputLine = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">		            json.append(inputLine);</div><div class="line">		        &#125;</div><div class="line">		        in.close();</div><div class="line">		    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">		    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		    &#125;</div><div class="line">		    <span class="keyword">return</span> json.toString();</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<p>jar包:<br><img src="https://upload-images.jianshu.io/upload_images/7889959-d222e094751ce73a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>工具类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</div><div class="line">	</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 获得c3p0连接池对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();  </div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">    	</div><div class="line">        <span class="comment">// 对池进行四大参数的配置  </span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">			dataSource.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (PropertyVetoException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;  </div><div class="line">        dataSource.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/stone?useUnicode=true&amp;characterEncoding=UTF-8"</span>);  </div><div class="line">        dataSource.setUser(<span class="string">"root"</span>);  </div><div class="line">        dataSource.setPassword(<span class="string">"admin"</span>);    </div><div class="line">        <span class="comment">// 池配置  </span></div><div class="line">        <span class="comment">//每次新增多少连接  </span></div><div class="line">        dataSource.setAcquireIncrement(<span class="number">5</span>);  </div><div class="line">        <span class="comment">//初始连接数多少  </span></div><div class="line">        dataSource.setInitialPoolSize(<span class="number">20</span>);  </div><div class="line">        <span class="comment">//最少连接数  </span></div><div class="line">        dataSource.setMinPoolSize(<span class="number">2</span>);  </div><div class="line">        <span class="comment">//最大连接数  </span></div><div class="line">        dataSource.setMaxPoolSize(<span class="number">50</span>);  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获得数据库连接对象</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataSource.getConnection();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获得c3p0连接池对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataSource;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后给大家看效果：<br>有些数据爬不到，应该是百度的反爬机制.(所以建议大家把上面的主方法，拆开运行)<br><img src="https://upload-images.jianshu.io/upload_images/7889959-aa454700958d18d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[个人的小小感悟]]></title>
      <url>/%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%B0%8F%E5%B0%8F%E6%84%9F%E6%82%9F/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p>今天我准备回家了，家，是一个人最后的归属，而我同样如此。</p>
<p>此刻的享受着动车带来的速度视觉，一眼望去，如此之大的世界，为何我们连一个扎根落脚的地都这么难找？（有些人会说，我有啊，说实在的，你爸妈给你的，并不是你自己寻找的，都不曾属于自己的成就。）</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/9b98b0f1-f4a1-46a2-871d-5d9426ec2fb1.png" alt=""></p>
<font color="red">昨天看到一个短片，里面描述着，我们都向往的生活。</font>

<p>故事开始！ </p>
<a id="more"></a>
<p>你尽管闭上眼睛，直到你29岁好了.</p>
<p>因为热爱，所以盲目，哪有什么理智可言。</p>
<p>耐心，每个人都用高处的标准来衡量现在的自己,</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/32fb3cb7-c5ef-4f4e-b3b7-116030a3d00b.png" alt=""></p>
<p>因为耐心可以为你提供承受风险的保护伞.</p>
<p>如果你既乐观又耐心，那么你成功上道了!</p>
<p>短片里说，那99%有所成就的人们，都无惧牺牲,坚持不懈,付出超过常人的努力.而且考虑的是50年，不是50天.</p>
<p>对人生的改变，何时都不晚！</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/a8bc0d40-81a6-4d16-84a8-d3261ad24dc1.png" alt=""></p>
<p>的确如此，我相信他最后说得话没错。</p>
<p>我们不是不想去改变现状，而是我们总是有各种的借口来逃避。</p>
<p>如果你失败了，不要怪别人，先从自己身上找原因。如果有天你成功了，看看那些跟你一起走过来的人。</p>
<p>我听我朋友说一过一句话:<font color="red">人如果感觉路不好走，很吃力，那么恭喜你，你在走上坡路。上坡路是你学习和成长的一个过程，如果你现在就轻松了，那么你老以后就走不动了。</font></p>
<p>我们要在年轻的时候，多去尝试一些从未经历的事情，让自己成长，让自己有着更多的阅历，让自己稍微领先一点。</p>
<p>各位一定要记住，没有什么不可能，如果你真的想去做的事情，先把最坏的结果想好，如果能承受，那么就去干，不要找借口，因为所有做不好事情的人，才会有各种各样的借口来推脱责任。</p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis多表查询关系配置]]></title>
      <url>/Mybatis%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%85%B3%E7%B3%BB%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><h3 id="后面有时间再写，睡觉了，明天还上班，又是忙碌和学习的一年，如果，技术稳定，去阿里做上几年，这辈子就不用再乱跑了！"><a href="#后面有时间再写，睡觉了，明天还上班，又是忙碌和学习的一年，如果，技术稳定，去阿里做上几年，这辈子就不用再乱跑了！" class="headerlink" title="#### 后面有时间再写，睡觉了，明天还上班，又是忙碌和学习的一年，如果，技术稳定，去阿里做上几年，这辈子就不用再乱跑了！"></a>#### 后面有时间再写，睡觉了，明天还上班，又是忙碌和学习的一年，如果，技术稳定，去阿里做上几年，这辈子就不用再乱跑了！</h3><a id="more"></a>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mybatis介绍和原理]]></title>
      <url>/Mybatis%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p>MyBatis 介绍-入门-原理</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Mybatis%E5%8E%9F%E7%90%86.png" alt=""></p>
<p>如上图所介绍的原理如下:</p>
<a id="more"></a>
<p>我的理解：</p>
<p>​    首先加载Mbatis的配置文件，然后创建SqlSessionFactory. 再由SqlSessionFactory 得到 SqlSession对象，</p>
<p>而这个对象的出现，就是为了下面执行sql的对象。</p>
<p>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。</p>
<h4 id="官方解释："><a href="#官方解释：" class="headerlink" title="官方解释："></a>官方解释：</h4><p><img src="http://oypem0qjb.bkt.clouddn.com/1d14245b-ad20-4e71-b59f-5eb2779f1169.png" alt=""></p>
<h3 id="Mybatis-对象使用范围"><a href="#Mybatis-对象使用范围" class="headerlink" title="Mybatis 对象使用范围"></a>Mybatis 对象使用范围</h3><p><img src="http://oypem0qjb.bkt.clouddn.com/462a67c7-2596-497d-bf13-6fb78642e0d5.png" alt=""></p>
<ul>
<li><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3></li>
</ul>
<p><img src="http://oypem0qjb.bkt.clouddn.com/1df3ded3-8ebc-4a9e-8dcd-edf1faf95fa0.png" alt=""></p>
<ul>
<li><h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SqlSession是一个面向用户的接口， sqlSession中定义了数据库操作方法。</div><div class="line">	每个线程都应该有它自己的SqlSession实例。SqlSession的实例不能共享使用，它也是线程不安全的。因此最佳的范围是请求或方法范围。绝对不能将SqlSession实例的引用放在一个类的静态字段或实例字段中。</div><div class="line">	打开一个 SqlSession；使用完毕就要关闭它。通常把这个关闭操作放到 <span class="keyword">finally</span> 块中以确保每次都能执行关闭。如下：</div><div class="line">	SqlSession session = sqlSessionFactory.openSession();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line"> 		 <span class="comment">// do work</span></div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  		session.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Mybatis-的dao层开发，分为2种，一种是传统的-dao接口和实现类，还有一种是接口-Mapper动态代理对象"><a href="#Mybatis-的dao层开发，分为2种，一种是传统的-dao接口和实现类，还有一种是接口-Mapper动态代理对象" class="headerlink" title="Mybatis 的dao层开发，分为2种，一种是传统的 dao接口和实现类，还有一种是接口+Mapper动态代理对象"></a>Mybatis 的dao层开发，分为2种，一种是传统的 dao接口和实现类，还有一种是接口+Mapper动态代理对象</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">注意事项：</span></span></div><div class="line"><span class="tag"><span class="attr">Mapper</span>接口开发方法只需要程序员编写<span class="attr">Mapper</span>接口（相当于<span class="attr">Dao</span>接口），由<span class="attr">Mybatis</span>框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边<span class="attr">Dao</span>接口实现类方法。</span></div><div class="line"><span class="tag"><span class="attr">Mapper</span>接口开发需要遵循以下规范：</span></div><div class="line"><span class="tag"><span class="attr">1</span>、	<span class="attr">Mapper.xml</span>文件中的<span class="attr">namespace</span>与<span class="attr">mapper</span>接口的类路径相同。</span></div><div class="line"><span class="tag"><span class="attr">2</span>、		<span class="attr">Mapper</span>接口方法名和<span class="attr">Mapper.xml</span>中定义的每个<span class="attr">statement</span>的<span class="attr">id</span>相同 </span></div><div class="line"><span class="tag"><span class="attr">3</span>、	<span class="attr">Mapper</span>接口方法的输入参数类型和<span class="attr">mapper.xml</span>中定义的每个<span class="attr">sql</span> 的<span class="attr">parameterType</span>的类型相同</span></div><div class="line"><span class="tag"><span class="attr">4</span>、	<span class="attr">Mapper</span>接口方法的输出参数类型和<span class="attr">mapper.xml</span>中定义的每个<span class="attr">sql</span>的<span class="attr">resultType</span>的类型相同</span></div></pre></td></tr></table></figure>
<p>代码实例:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//mybatis配置文件</span></div><div class="line">		String resource = <span class="string">"sqlMapConfig.xml"</span>;</div><div class="line">		InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">		<span class="comment">//使用SqlSessionFactoryBuilder创建sessionFactory</span></div><div class="line">		sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	<span class="function">Public <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//获取session</span></div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		<span class="comment">//获取mapper接口的代理对象</span></div><div class="line">		UserMapper userMapper = session.getMapper(UserMapper.class);</div><div class="line">		<span class="comment">//调用代理对象方法</span></div><div class="line">		User user = userMapper.findUserById(<span class="number">1</span>);</div><div class="line">		System.out.println(user);</div><div class="line">		<span class="comment">//关闭session</span></div><div class="line">		session.close();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserByUsername</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		SqlSession sqlSession = sqlSessionFactory.openSession();</div><div class="line">		UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">		List&lt;User&gt; list = userMapper.findUserByUsername(<span class="string">"张"</span>);</div><div class="line">		System.out.println(list.size());</div><div class="line"></div><div class="line">	&#125;</div><div class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">//获取session</span></div><div class="line">		SqlSession session = sqlSessionFactory.openSession();</div><div class="line">		<span class="comment">//获取mapper接口的代理对象</span></div><div class="line">		UserMapper userMapper = session.getMapper(UserMapper.class);</div><div class="line">		<span class="comment">//要添加的数据</span></div><div class="line">		User user = <span class="keyword">new</span> User();</div><div class="line">		user.setUsername(<span class="string">"张三"</span>);</div><div class="line">		user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">		user.setSex(<span class="string">"1"</span>);</div><div class="line">		user.setAddress(<span class="string">"北京市"</span>);</div><div class="line">		<span class="comment">//通过mapper接口添加用户</span></div><div class="line">		userMapper.insertUser(user);</div><div class="line">		<span class="comment">//提交</span></div><div class="line">		session.commit();</div><div class="line">		<span class="comment">//关闭session</span></div><div class="line">		session.close();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置内容"><a href="#配置内容" class="headerlink" title="配置内容"></a>配置内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">SqlMapConfig.xml中配置的内容和顺序如下：</div><div class="line"></div><div class="line">properties（属性）</div><div class="line">settings（全局配置参数）</div><div class="line">typeAliases（类型别名）</div><div class="line">typeHandlers（类型处理器）</div><div class="line">objectFactory（对象工厂）</div><div class="line">plugins（插件）</div><div class="line">environments（环境集合属性对象）</div><div class="line">	environment（环境子属性对象）</div><div class="line">		transactionManager（事务管理）</div><div class="line">			dataSource（数据源）</div><div class="line">mappers（映射器）</div></pre></td></tr></table></figure>
<h2 id="面试问题："><a href="#面试问题：" class="headerlink" title="面试问题："></a>面试问题：</h2><p>在Mybatis中 #和$ 的区别：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#占位符，防止注入</div><div class="line"></div><div class="line">$ 拼接符，不防注入</div></pre></td></tr></table></figure>
<p>Mybatis 和Hibernate 对比</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">虽然他们都是ORM框架，但是Mybatisqu并不是一个完整的ORM框架，因为你使用Hibernate可以完全不写sql语句,完全对java类型操作就可以了。那Mybatis是做不到的，使用Mybatis那你就必须写sql语句了.</div><div class="line">Hibernate 对sql优化就不是特别好了，因为它是关系映射,都是javaBean，不怎么好优化。</div><div class="line">如果，想灵活的开发，那就使用Mybatis，如果想提高开发效率就是会用Hibernate</div></pre></td></tr></table></figure>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="面试问题-技术总结"><a href="#面试问题-技术总结" class="headerlink" title="面试问题(技术总结)"></a>面试问题(技术总结)</h1><h3 id="什么是SOA-分布式"><a href="#什么是SOA-分布式" class="headerlink" title="什么是SOA 分布式"></a>什么是SOA 分布式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">集群：就是很多的服务器来实现一种功能，例如mysql，很多的服务器都安装mysql</div><div class="line"></div><div class="line">负载均衡：就是用来调节的，比方说有很多的用户都在访问读取数据，可是读取a服务器的mysql多，而读取别的服务器的mysql就少，负载均衡把访问a的用户转给b一部分，防止a由于访问量过大造成宕机什么的。</div><div class="line"></div><div class="line">分布式：一个系统把不同的服务分开来部署，用户模块，bbs论坛模块，内容模块，支付模块。对服务的访问量很大的时候，单台服务器已经满足不了需求，就把服务分散到几台甚至几十台几百天电脑上</div><div class="line"></div><div class="line">好处：每个模块只负责自己的事情和请求压力，开发人员只负责自己的东西</div><div class="line"></div><div class="line">分布式应用开发简单的说，是指将用户界面、控制台服务、数据库管理三个层次部署在不同的位置上。其中用户界面是客户端实现的功能，控制台服务是一个专门的服务器，数据管理是在一个专门的数据库服务器上实现的。</div></pre></td></tr></table></figure>
<p> 自我理解:<br>     对项目的客户(用户界面),数据存储(操作数据(服务)),对数据库的操作(数据层) 分离开来,并且可以进行高效的敏捷开发.<br>    分布式,可以对各个模块进行加强(服务器添加(集群处理)),把调用次数比较多的服务,多加服务器,哪些很少使用的服务,可以对它进行一个降低.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">### hibernate和mybatis的区别</div><div class="line">- hibernate 是对SQL进行了高度的封装,它有自己的HQL语句</div><div class="line">- mybatis保留了对数据库灵活的操作,需要自己写sql语句</div><div class="line">- 他们都是ORM对象映射(数据查询出来以后都是存在pojo类中),使用方法都是大同小异.</div><div class="line">### hibernate的多个参数如何传递?怎么转换?</div><div class="line">- 自己理解 :</div><div class="line">  - 数组传递,对HQL的语句进行拼接,in()里面的条件通过循环来判断.</div><div class="line">- 百度理解:</div><div class="line">  - 集合(List),session.createSQLQuery(sql).setParameterList(&quot;userIdList&quot;, userIdList).list(); </div><div class="line">  - 创建一个查询对象,并且,直接吧集合传进去即可.(setParameterList)</div><div class="line">### SpringMVC和struts2 的区别</div><div class="line">``` </div><div class="line">	SpringMVC和struts2区别</div><div class="line">		实现不同</div><div class="line">			SpringMVC是通过Servlet来实现的</div><div class="line">			Struts2是通过拦截器来实现的</div><div class="line">		Json的转换方式不同</div><div class="line">			Spring MVC是自动转为json</div><div class="line">			Struts2是通过插件来转</div><div class="line">		数据传输不同</div><div class="line">			SpringMVC是通过参数来传递的</div><div class="line">			Struts2是通过值栈来传递的,而值栈是个比较庞大的东西</div><div class="line">		控制器实例不同</div><div class="line">			SpringMVC是基于方法来实现的</div><div class="line">			Struts2是基于对象来实现的</div><div class="line">			SpringMVC从理论上来讲是比Struts2快的</div></pre></td></tr></table></figure></p>
<h3 id="四大域对象"><a href="#四大域对象" class="headerlink" title="四大域对象"></a>四大域对象</h3><ul>
<li><p>ServletContext<br> 生命周期：当WEB应用被加载进容器创建代表整个WEB应用的ServletContext对象，当服务器关闭或WEB应用被移除时，ServletContext对象跟着被销毁。</p>
<p> 作用范围：整个WEB应用。</p>
<p> 在不同Servlet之间转发、读取资源文件</p>
</li>
<li>Request域<br>1.生命周期：在Service方法调用前由服务器创建，传入service发那个发。整个请求结束，request生命结束。<br>2.作用范围：整个请求链（请求转发也存在）<br>3.作用：在整个请求链中共享数据，经常用到：在servlet中处理好的数据交给JSP显示，此时参数就可以放在Request域中。</li>
<li>Session域<br> 1.生命周期：在第一次调用request.getSession()方法时，服务器会检查是否已经有对应的session，如果没有就在内存中创建一个session并返回。当一段时间内session没有被使用（默认为30分钟），则服务器会销毁该session。如果服务器非正常关闭，没有到期的session也会跟着销毁。如果调用session提供的invalidate()，可以立即销毁session。<br> 2.作用范围：一次会话。</li>
<li>PageContext域<br>1.生命周期：当对JSP的请求开始，当相应结束时销毁。<br>2.作用范围：整个JSP页面，是四大作用域中最小的一个。<br>3.作用：获取其他八大隐式对象，可以认为是一个入口对象。<pre><code>`获取所有域中的数据`。
`跳转到其他资源`。
</code></pre><h3 id="Spring-参数如何传递"><a href="#Spring-参数如何传递" class="headerlink" title="Spring 参数如何传递"></a>Spring 参数如何传递</h3></li>
<li>直接把表单的参数写在Controller相应的方法的形参中，适用于get方式提交，不适用于post方式提交。</li>
<li>通过HttpServletRequest接收，post方式和get方式都可以。</li>
<li>通过一个bean来接收,post方式和get方式都可以。(也叫模型驱动)</li>
<li>通过@PathVariable获取路径中的参数</li>
<li>使用@ModelAttribute注解获取POST请求的FORM表单数据</li>
<li>用注解@RequestParam绑定请求参数到方法入参</li>
</ul>
<h3 id="Spring的特征"><a href="#Spring的特征" class="headerlink" title="Spring的特征"></a>Spring的特征</h3><ul>
<li><p>aop(面向切面编程):</p>
<ul>
<li>软件系统分为两个部分：核心关注点和横切关注点<ul>
<li>业务处理的主要流程是核心关注点</li>
<li>与之关系不大的部分是横切关注点</li>
</ul>
</li>
<li><p>AOP核心概念</p>
<p>横切关注点<br>切面（aspect）<br>连接点（joinpoint）<br>切入点（pointcut）<br>通知（advice）<br>目标对象<br>织入（weave）<br>引入（introduction）</p>
</li>
</ul>
</li>
<li><p>ioc(控制反转):</p>
<ul>
<li><p>IOC是一种思想,是一个重要的面向对象编程的体现之一</p>
</li>
<li><p>它是把创建和查找依赖对象的控制器交给了容器,有容器进行注入组合对象,所以对象与对象之间是,低耦合的,便于测试,而且也使得整个体系架构变得更灵活</p>
</li>
<li>就是对象找依赖并注入,而不是对象自己主动去找</li>
</ul>
</li>
<li><p>IOC依赖注入</p>
<ul>
<li>在控制反转中获取资源的过程叫做依赖注入<br>-注入有2种,一种是通过xml配置进行构造注入<br>-还有一种是通过setter注入,就是通过对象的set方法进行注入.</li>
<li>一般都是在Spring配置文件中,配置bean ,然后交给Spring自动注入,我们拿到对象就可以直接使用.</li>
</ul>
</li>
</ul>
<h3 id="Spring-AOP-动态代理的实现"><a href="#Spring-AOP-动态代理的实现" class="headerlink" title="Spring AOP (动态代理的实现)"></a>Spring AOP (动态代理的实现)</h3><h3 id="Spring-MVC执行流程"><a href="#Spring-MVC执行流程" class="headerlink" title="Spring MVC执行流程"></a>Spring MVC执行流程</h3><ul>
<li>自己理解:<ul>
<li>客户请求–&gt;前端控制器–&gt;前端控制器找到HandlerAdapter–&gt;HandlerAdapter(处理数据)—&gt;返回视图–&gt;然后渲染视图–&gt;最后返回视图给客户<h3 id="Struts2的执行流程"><a href="#Struts2的执行流程" class="headerlink" title="Struts2的执行流程"></a>Struts2的执行流程</h3></li>
</ul>
</li>
</ul>
<h3 id="Hibernate的执行流程"><a href="#Hibernate的执行流程" class="headerlink" title="Hibernate的执行流程"></a>Hibernate的执行流程</h3><h3 id="mybatis的执行流程"><a href="#mybatis的执行流程" class="headerlink" title="mybatis的执行流程"></a>mybatis的执行流程</h3><h3 id="ElasticSearch-搭建"><a href="#ElasticSearch-搭建" class="headerlink" title="ElasticSearch 搭建"></a>ElasticSearch 搭建</h3><h3 id="ElasticSearch怎么建立索引"><a href="#ElasticSearch怎么建立索引" class="headerlink" title="ElasticSearch怎么建立索引"></a>ElasticSearch怎么建立索引</h3><h3 id="ElasticSearch-怎么使用"><a href="#ElasticSearch-怎么使用" class="headerlink" title="ElasticSearch 怎么使用"></a>ElasticSearch 怎么使用</h3><h3 id="solr-搭建"><a href="#solr-搭建" class="headerlink" title="solr 搭建"></a>solr 搭建</h3><h3 id="solr-怎么建立索引"><a href="#solr-怎么建立索引" class="headerlink" title="solr 怎么建立索引"></a>solr 怎么建立索引</h3><h3 id="solr-怎么使用"><a href="#solr-怎么使用" class="headerlink" title="solr 怎么使用"></a>solr 怎么使用</h3><h3 id="ActiveMQ-使用"><a href="#ActiveMQ-使用" class="headerlink" title="ActiveMQ 使用"></a>ActiveMQ 使用</h3><p>消费者:<br>生产者:</p>
<h3 id="Dobbo"><a href="#Dobbo" class="headerlink" title="Dobbo"></a>Dobbo</h3><h3 id="WebService"><a href="#WebService" class="headerlink" title="WebService"></a>WebService</h3><h3 id="String-amp-amp-StringBuffer-的区别-在什么时候使用"><a href="#String-amp-amp-StringBuffer-的区别-在什么时候使用" class="headerlink" title="String &amp;&amp; StringBuffer 的区别,在什么时候使用."></a>String &amp;&amp; StringBuffer 的区别,在什么时候使用.</h3><h3 id="Nginx-负载均衡搭建"><a href="#Nginx-负载均衡搭建" class="headerlink" title="Nginx 负载均衡搭建"></a>Nginx 负载均衡搭建</h3><h3 id="Redis的搭建-集群"><a href="#Redis的搭建-集群" class="headerlink" title="Redis的搭建(集群)"></a>Redis的搭建(集群)</h3><h3 id="Redis-中的5种数据类型"><a href="#Redis-中的5种数据类型" class="headerlink" title="Redis 中的5种数据类型"></a>Redis 中的5种数据类型</h3><p>String：key-value（做缓存）<br>Hash：key-fields-values（做缓存）<br>SortedSet（zset）：有顺序，不能重复</p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python爬虫入门]]></title>
      <url>/python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p>今天,来介绍一下听起来很牛,其实的确牛的爬虫技术!(当然,我现在也学习者,分享一下学习经验)</p>
<p>废话不多少,先直接看效果</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1518176193209.jpg" alt="500条数据URL"></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1518176400116.jpg" alt="爬虫获取数据"></p>
<a id="more"></a>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1518176486356.jpg" alt="获取数据"></p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下:"></a>代码如下:</h3><h4 id="文章URL爬取"><a href="#文章URL爬取" class="headerlink" title="文章URL爬取"></a>文章URL爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span>  pymysql</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitSql</span><span class="params">(bookName,bookLink)</span>:</span></div><div class="line">    bookName = str(bookName).replace(<span class="string">' '</span>, <span class="string">''</span>)</div><div class="line">    bookName = str(bookName).replace(<span class="string">'\r\n'</span>, <span class="string">''</span>)</div><div class="line">    db=pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'123'</span>, db=<span class="string">'booklog'</span>,charset=<span class="string">'utf8'</span>)</div><div class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></div><div class="line">    cursor = db.cursor()</div><div class="line">    <span class="comment"># 使用 execute()  方法执行 SQL 查询</span></div><div class="line">    sql=<span class="string">"insert into csdnbook(bookName,linkURL) VALUE('"</span>+str(bookName)+<span class="string">"','"</span>+str(bookLink)+<span class="string">"')"</span></div><div class="line">    print(sql)</div><div class="line">    cursor.execute(sql)</div><div class="line">    db.commit()</div><div class="line">    cursor.close()</div><div class="line">    db.close()</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDiv</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="comment">####截取主要的文章链接块#</span></div><div class="line">    divClass = html.find(<span class="string">"article_list"</span>)</div><div class="line">    divClassEnd=html.find(<span class="string">"papelist"</span>,divClass)<span class="number">-38</span></div><div class="line">    <span class="comment">############截取到文章的块以后,把HTML内容重新赋值#############</span></div><div class="line">    html=html[divClass:divClassEnd]</div><div class="line">    <span class="comment">#print(html)</span></div><div class="line">    <span class="keyword">return</span> html</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Listadd</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="comment">#进行html解析(首页解析)</span></div><div class="line">    html=str(html)</div><div class="line">    <span class="comment">#获取文章块的文章(唯一标识哦!)</span></div><div class="line">    divClass=html.find(<span class="string">"article_list"</span>)</div><div class="line">    <span class="comment">#############循环查找每一个DIV(article_title)标签和 A标签里名的名字######################</span></div><div class="line">    <span class="keyword">while</span>(divClass&gt;= <span class="number">-1</span>):</div><div class="line">        <span class="comment">##寻找主要的链接和文章名字的块,而不是全部链接</span></div><div class="line">        divClass=html.find(<span class="string">'link_title'</span>,divClass)</div><div class="line">        <span class="comment">#寻找链接文章名字</span></div><div class="line">        <span class="keyword">if</span> (divClass &lt;= <span class="number">-1</span>):</div><div class="line">            <span class="keyword">break</span></div><div class="line">        a_=html.find(<span class="string">'&lt;a href="'</span>,divClass)+<span class="number">9</span></div><div class="line">        _a=html.find(<span class="string">'&gt;'</span>,a_)<span class="number">-1</span></div><div class="line">       <span class="comment">#文章名字从链接获取完成以后开始  &lt;a&gt;名字&lt;/a&gt; 所以此刻的位置就是 _a +2的位置</span></div><div class="line">                        <span class="comment"># name_=html.find('',_a)+3</span></div><div class="line">                        <span class="comment"># _name=html.find('&lt;/a',name_)</span></div><div class="line"></div><div class="line">        bookName_start = html.find(<span class="string">''</span>, _a) + <span class="number">2</span></div><div class="line">        bookName_end = html.find(<span class="string">'&lt;'</span>, bookName_start)</div><div class="line">        <span class="comment">#链接的的截取</span></div><div class="line">        url=html[a_:_a]</div><div class="line">        <span class="comment">#截取文章名字</span></div><div class="line">        Bookname=html[bookName_start:bookName_end]</div><div class="line">        divClass = html.find(<span class="string">"&lt;a href="</span>,bookName_end)</div><div class="line">        url=<span class="string">"http://blog.csdn.net"</span>+url</div><div class="line">        <span class="comment">#linkList.append(url)</span></div><div class="line">        <span class="comment">###########查看获取到的数据###########</span></div><div class="line">        <span class="comment">##去掉所有空格</span></div><div class="line">        Bookname.replace(<span class="string">" "</span>,<span class="string">""</span>)</div><div class="line">        url.replace(<span class="string">" "</span>, <span class="string">""</span>)</div><div class="line">        <span class="comment">#print(Bookname+url)</span></div><div class="line">        <span class="comment">############添加到数据库###########</span></div><div class="line">        waitSql(Bookname,url)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileWarit</span><span class="params">(html,i)</span>:</span></div><div class="line">    file=open(str(i)+<span class="string">'.html'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>)</div><div class="line">    file.write(html)</div><div class="line">    file.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#################请求循环,到25页,(分页请求)###############</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">geturl</span><span class="params">()</span>:</span></div><div class="line">    i=<span class="number">1</span></div><div class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">25</span>):</div><div class="line">        url=<span class="string">"http://blog.csdn.net/u010870518/article/list/"</span>+str(i)</div><div class="line">        print(url)</div><div class="line">        <span class="comment"># # 写入User Agent信息</span></div><div class="line">        <span class="comment"># head = &#123;&#125;</span></div><div class="line">        <span class="comment"># head[</span></div><div class="line">        <span class="comment">#     'User-Agent'] = 'Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166  Safari/535.19'</span></div><div class="line">        <span class="comment"># 创建Request对象</span></div><div class="line">        web_date = requests.put(url)</div><div class="line">        <span class="comment">#把网页格式内容转换为 utf-8</span></div><div class="line">        web_date.encoding = <span class="string">'utf-8'</span></div><div class="line">        <span class="comment">#####获取网页内容##</span></div><div class="line">        html = web_date.text</div><div class="line">        <span class="comment">#fileWarit(html,i)</span></div><div class="line">        <span class="comment">####使用 getDiv 方法把 html中文章的DIV 截取到#</span></div><div class="line">        html = getDiv(html)</div><div class="line">        <span class="comment">#########链接添加到数据库##########</span></div><div class="line">        Listadd(html)</div><div class="line">        i=i+<span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">###############################程序执行#####################</span></div><div class="line">geturl()</div><div class="line"><span class="comment">#fileWarit(html)</span></div></pre></td></tr></table></figure>
<h4 id="文章爬取"><a href="#文章爬取" class="headerlink" title="文章爬取:"></a>文章爬取:</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  pymysql</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span>  time</div><div class="line"></div><div class="line"><span class="comment">#######用来存储,数据库查询到的数据,名字,链接,时间###############</span></div><div class="line">NameList=[]</div><div class="line">urlList=[]</div><div class="line">datetime=[]</div><div class="line"></div><div class="line"><span class="comment">#获取数据中,由CSDN 爬取到的文章 名字和链接</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitSql</span><span class="params">()</span>:</span></div><div class="line">    db=pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'admin'</span>, db=<span class="string">'booklog'</span>,charset=<span class="string">'utf8'</span>)</div><div class="line">    <span class="comment"># 使用 cursor() 方法创建一个游标对象 cursor</span></div><div class="line">    cursor = db.cursor()</div><div class="line">    <span class="comment"># 使用 execute()  方法执行 SQL 查询</span></div><div class="line">    sql=<span class="string">"select bookName,linkURL,dateTime from csdnbook"</span></div><div class="line">    cursor.execute(sql)</div><div class="line">    <span class="comment">#获取数据库查询的数据</span></div><div class="line">    results=cursor.fetchall()</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</div><div class="line">        NameList.append(row[<span class="number">0</span>])</div><div class="line">        urlList.append(row[<span class="number">1</span>])</div><div class="line">        datetime.append(row[<span class="number">2</span>])</div><div class="line">    <span class="comment">#数组存数据</span></div><div class="line"></div><div class="line">    cursor.close()</div><div class="line">    db.close()</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDiv</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="comment">####截取主要的文章链接块#</span></div><div class="line">    divClass = html.find(<span class="string">'&lt;div class="markdown_views"&gt;'</span>)</div><div class="line">    divClassEnd=html.find(<span class="string">'&lt;script  type="text/javascript"&gt;'</span>,divClass)</div><div class="line">    <span class="comment">############截取到文章的块以后,把HTML内容重新赋值#############</span></div><div class="line">    html=html[divClass:divClassEnd]</div><div class="line">    <span class="comment">#print(html)</span></div><div class="line">    <span class="keyword">return</span> html</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDiv2</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="comment">####截取主要的文章链接块#</span></div><div class="line">    divClass = html.find(<span class="string">'&lt;div id="article_content"'</span>)</div><div class="line">    divClassEnd=html.find(<span class="string">'&lt;div class="bdsharebuttonbox tracking-ad'</span>,divClass)<span class="number">-45</span></div><div class="line">    <span class="comment">############截取到文章的块以后,把HTML内容重新赋值#############</span></div><div class="line">    html=html[divClass:divClassEnd]</div><div class="line">    <span class="comment">#print(html)</span></div><div class="line">    <span class="keyword">return</span> html</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitr</span><span class="params">(name, html, time)</span>:</span></div><div class="line">    <span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">    <span class="comment">#################各种字符串 转换异常#######################</span></div><div class="line">    name = str(name).replace(<span class="string">'/'</span>, <span class="string">''</span>)</div><div class="line">    name = str(name).replace(<span class="string">'\x08'</span>,<span class="string">''</span>)</div><div class="line">    name = str(name).replace(<span class="string">':'</span>, <span class="string">''</span>)</div><div class="line">    name=str(name).replace(<span class="string">'：'</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line">    print(name)</div><div class="line">    file = open(name + <span class="string">'.md'</span>,<span class="string">'w+'</span>,encoding=<span class="string">'utf8'</span>)</div><div class="line">    head = <span class="string">"---\ntitle: "</span> + name + <span class="string">"\ndate: "</span> + str(</div><div class="line">        time) + <span class="string">"\ntags: [javaEE]\nkeywords: "</span> + name + <span class="string">",Stone的博客\n---\n#####  [@作者博客](http://www.1314sl.com)\n"</span></div><div class="line">    Text = head + html</div><div class="line">    print(Text)</div><div class="line">    file.flush()</div><div class="line">    file.write(Text)</div><div class="line">    file.close()</div><div class="line">    <span class="keyword">return</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    waitSql()</div><div class="line">    print(len(urlList))</div><div class="line">    print(len(NameList))</div><div class="line">    print(len(datetime))</div><div class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(urlList)):</div><div class="line">        web_data = requests.put(urlList[index])</div><div class="line">        web_data.encoding=<span class="string">'utf-8'</span></div><div class="line">        html=getDiv(web_data.text)</div><div class="line">        <span class="keyword">if</span>(html==<span class="string">""</span>):</div><div class="line">            print(<span class="string">"###################245章以后的文章###########################"</span>)</div><div class="line">            <span class="comment">#######在245章以后文件的样式不同了###所以重新解析一下######</span></div><div class="line">            html=getDiv2(web_data.text)</div><div class="line">            <span class="keyword">if</span>(html==<span class="string">""</span>):</div><div class="line">                print(NameList[index]+<span class="string">"###############%%%%%%%%失败了%%%%%%%%%%%%%%%%################"</span>)</div><div class="line">                <span class="keyword">continue</span></div><div class="line">        waitr(NameList[index],html,datetime[index])</div></pre></td></tr></table></figure>
<p>好啦,装逼的时间过了,来介绍一下:</p>
<p>这次爬虫的目标是,中国最大的技术博客CSDN,不知道的朋友可以去百度.</p>
<p>首先,打开CSDN网站(<a href="http://blog.csdn.net/u010870518/article/list/1" target="_blank" rel="external">http://blog.csdn.net/u010870518/article/list/1</a>)</p>
<p>第二部就是解析这个网站的HTML结构.</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1518177071778.jpg" alt=""></p>
<p>HTML主要的代码块,就在这个DIV里,我们打开这个DIV,再去寻找自己想要的数据.</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1518177160041.jpg" alt=""></p>
<p>点开以后发现,里面每一个DIV块,对于每一个文章入口.<br>那就好操作了,现在已经找到它网站的有序结构就好爬取了.</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1518177359637.jpg" alt=""></p>
<p>它所有的URL都存在这个规定格式的a标签里,我们获取页面,然后利用pythone的来查找这个DIV块里的DIV块,然后获取a标签就可以了,</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1518177487930.jpg" alt=""></p>
<p>将获取到的链接,保存到数据库,即可.</p>
<p>然后再从数据库里获取就可以了!</p>
<p>这里就先介绍到这里.源码已经放在上面,喜欢的朋友可以试试.</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/Python%E7%88%AC%E8%99%AB.png" alt="enter description here" title="Python爬虫"></p>
<p><code>本博客,所有的文章,仅供学习,请勿商业利用!本人概不负责!</code></p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux安装mysql]]></title>
      <url>/Linux%E5%AE%89%E8%A3%85mysql/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><h3 id="安装mysql-Centos"><a href="#安装mysql-Centos" class="headerlink" title="安装mysql Centos"></a>安装mysql Centos</h3><ol>
<li><p>下载mysql文件（5.6 linux-通用版）</p>
</li>
<li><p>上传到linux系统中</p>
</li>
<li><p>创建mysql的文件夹 </p>
</li>
<li><p>解压到文件夹 (/usr/local/develop/mysql)</p>
</li>
<li><p>安装mysql的服务端</p>
<ul>
<li>rpm -ivh MySQL-server-5.6.22-l.e16.i686.rpm</li>
</ul>
</li>
<li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">如果上面的行不通，报错，就下载 mysql -glib.tar 版本的</div><div class="line">安装步骤：</div><div class="line">shell&gt; groupadd mysql  # 添加用户组 mysql</div><div class="line">shell&gt; useradd -r -g mysql mysql   # 添加用户mysql 并加入到 mysql 组中</div><div class="line">shell&gt; cd /usr/local  # 进入用户本地目录</div><div class="line">shell&gt; tar zxvf /path/to/mysql-VERSION-OS.tar.gz # 解压mysql压缩包(已解压略过)</div><div class="line">shell&gt; ln -s full-path-to-mysql-VERSION-OS mysql # 创建软连接 mysql 指定mysql**目录</div><div class="line">shell&gt; cd mysql  # 进入mysql目录 ，或软连接目录</div><div class="line">shell&gt; chown -R mysql .    # 更改当前目录下的所有文件的所属用户为 mysql</div><div class="line">shell&gt; chgrp -R mysql .    # 更改当前目录下的所有文件的所属组为 mysql</div><div class="line">shell&gt; scripts/mysql_install_db --user=mysql  # 开始安装(调用安装脚本)</div><div class="line">shell&gt; chown -R root .</div><div class="line">shell&gt; chown -R mysql data</div><div class="line"># Next command is optional</div><div class="line">shell&gt; cp support-files/my-medium.cnf /etc/my.cnf</div><div class="line">shell&gt; bin/mysqld_safe --user=mysql &amp;</div><div class="line"># Next command is optional</div><div class="line">shell&gt; cp support-files/mysql.server /etc/init.d/mysql.server</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Ubuntu 16.0 卸载 Mysql </p>
<a id="more"></a>
<ul>
<li>sudo apt purge mysql-*</li>
<li>sudo rm -rf /etc/mysql/ /var/lib/mysql</li>
<li>sudo apt autoremove</li>
<li>sudo apt autoreclean</li>
</ul>
<h3 id="Ubuntu16-0-安装Mysql"><a href="#Ubuntu16-0-安装Mysql" class="headerlink" title="Ubuntu16.0 安装Mysql"></a>Ubuntu16.0 安装Mysql</h3><h4 id="安装5-6"><a href="#安装5-6" class="headerlink" title="安装5.6"></a>安装5.6</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install software-properties-common</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository &apos;deb http://archive.ubuntu.com/ubuntu trusty universe&apos;</div><div class="line">sudo apt-get update</div><div class="line">sudo apt install mysql-server-5.6</div><div class="line">sudo apt install mysql-client-5.6</div><div class="line"></div><div class="line">查看服务：</div><div class="line">cd /etc/init.d/</div><div class="line">ls</div><div class="line">如果有mysql 就表示安装成功</div><div class="line"></div><div class="line">启动mysql：</div><div class="line">service mysql start</div><div class="line">停止mysql：</div><div class="line">service 服务名 start或stop</div><div class="line"></div><div class="line">&lt;!--如果你的mysql,不能远程连接,那你就开启远程服务!--&gt;</div><div class="line">开启远程服务：</div><div class="line">登录mysql:</div><div class="line">grant all privileges on *.* to &apos;root&apos; @&apos;%&apos; identified by &apos;admin&apos;;</div><div class="line">flush privileges;</div><div class="line">•	设置Linux的防火墙:</div><div class="line">/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</div><div class="line">/etc/rc.d/init.d/iptables save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Errors were encountered while processing:</div><div class="line"></div><div class="line">sudo -s</div><div class="line">cd /var/cache/debconf</div><div class="line">rm *.dat</div><div class="line">apt-get update &amp;&amp; apt-get upgrade</div></pre></td></tr></table></figure>
<h4 id="安装mysql-5-7-最新"><a href="#安装mysql-5-7-最新" class="headerlink" title="安装mysql 5.7 (最新)"></a>安装mysql 5.7 (最新)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install mysql-server</div><div class="line">系统将提示您在安装过程中创建 root 密码。选择一个安全的密码，并确保你记住它，因为你以后需要它。接下来，我们将完成 MySQL 的配置。</div><div class="line">sudo mysql_secure_installation</div><div class="line">systemctl status mysql.service</div><div class="line">您将看到类似于以下内容的输出：</div><div class="line"></div><div class="line"></div><div class="line">mysql.service - MySQL Community Server</div><div class="line">Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: en Active: active (running) since Wed 2016-11-23 21:21:25 UTC; 30min ago Main PID: 3754 (mysqld) Tasks: 28 Memory: 142.3M CPU: 1.994s CGroup: /system.slice/mysql.service └─3754 /usr/sbin/mysqld</div><div class="line">如果MySQL没有运行，您可以启动它：</div><div class="line"></div><div class="line">sudo systemctl mysql start</div><div class="line">如果额外的检查，您可以尝试使用该 mysqladmin 工具连接到数据库，该工具是允许您运行管理命令的客户端。例如，该命令表示以 root（-u root）方式连接到 MySQL ，提示输入密码（-p）并返回版本。</div><div class="line"></div><div class="line">mysqladmin -p -u root version</div><div class="line">你应该看到类似的输出：</div><div class="line"></div><div class="line"></div><div class="line">mysqladmin  Ver 8.42 Distrib 5.7.16, for Linux on x86_64</div><div class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners.</div><div class="line">Server version 5.7.16-0ubuntu0.16.04.1 Protocol version 10 Connection Localhost via UNIX socket UNIX socket /var/run/mysqld/mysqld.sock Uptime: 30 min 54 sec</div><div class="line">Threads: 1 Questions: 12 Slow queries: 0 Opens: 115 Flush tables: 1 Open tables: 34 Queries per second avg: 0.006</div><div class="line">这意味着MySQL正在运行。</div><div class="line"></div><div class="line">结论</div><div class="line"></div><div class="line">现在您的服务器上已经安装了一个可以使用的 MySQL 5.7 了。</div></pre></td></tr></table></figure>
<h4 id="设置mysql-数据库-不区分大小写-项目上线"><a href="#设置mysql-数据库-不区分大小写-项目上线" class="headerlink" title="设置mysql 数据库 不区分大小写(项目上线)"></a>设置mysql 数据库 不区分大小写(项目上线)</h4><p>在my.cnf文件中: [mysqld] 后面<br>添加:</p>
<p>lower_case_table_names=1</p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux环境搭建_Ubuntu]]></title>
      <url>/Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Ubuntu/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><h3 id="Ubuntu-16-0-安装jdk"><a href="#Ubuntu-16-0-安装jdk" class="headerlink" title="Ubuntu 16.0 安装jdk"></a>Ubuntu 16.0 安装jdk</h3><h4 id="最快速-最装逼的安装方式"><a href="#最快速-最装逼的安装方式" class="headerlink" title="最快速,最装逼的安装方式"></a>最快速,最装逼的安装方式</h4><p>直接在命令行里,运行,以下命令即可!</p>
<p> <code>sudo apt-get install default-jre</code><br> <a id="more"></a><br> 手动安装JDK</p>
<ol>
<li><p>下载jdk <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">下载地址</a></p>
</li>
<li><p>利用工具上传到Ubuntu系统,我这里使用的是 <a href="https://filezilla-project.org/" target="_blank" rel="external">FileZilla</a></p>
</li>
<li><p>解压到目录(/usr/local/java)</p>
</li>
<li><p>设置环境变量,修改配置文件   sudo vim ~/.bashrc<br>在最后面加上：<br>#set oracle jdk environment<br>export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_60  ## 要换成自己解压的jdk 目录<br>export JRE_HOME=${JAVA_HOME}/jre<br>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib<br>export PATH=${JAVA_HOME}/bin:$PATH  </p>
<ol>
<li>然后刷新配置文件 sudo vim ~/.bashrc</li>
<li>设置系统默认jdk 版本  第二个路径是你jdk安装的路径<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">下面是终端运行的代码,机制,第二个是你JDK解压的路径</div><div class="line"></div><div class="line">  sudo update-alternatives --install /usr/bin/java java /usr/local/jdk1.7.0_80/bin/java 300  </div><div class="line"> sudo update-alternatives --install /usr/bin/javac javac /usr/local/jdk1.7.0_80/bin/javac 300  </div><div class="line"> sudo update-alternatives --install /usr/bin/jar jar /usr/local/jdk1.7.0_80/bin/jar 300   </div><div class="line"> sudo update-alternatives --install /usr/bin/javah javah /usr/local/jdk1.7.0_80/bin/javah 300   </div><div class="line"> sudo update-alternatives --install /usr/bin/javap javap /usr/local/jdk1.7.0_80/bin/javap 300</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>sudo update-alternatives –config java  (查看系统中有几个jdk，并且选择用哪个)</p>
</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1517218933960.jpg" alt=""></p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux环境搭建(JDK)]]></title>
      <url>/Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-JDK/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><h3 id="Centos-装jdk"><a href="#Centos-装jdk" class="headerlink" title="Centos 装jdk"></a>Centos 装jdk</h3><ol>
<li><p>下载JDK 我这边下载的是 jdk1.7 </p>
</li>
<li><p>上传文件（FileZilla)</p>
</li>
<li><p>在 /usr/local/ 目录下 创建 java   <code>mdkir /usr/local/java</code></p>
<a id="more"></a>
</li>
<li><p>安装 依赖</p>
<ul>
<li><code>yum install glibc.i686</code></li>
</ul>
</li>
<li><p>解压 <code>jdk的包</code></p>
<ul>
<li>tar -zxvf  jdk_xxx.tar.gz -C /usr/local/java</li>
</ul>
</li>
<li><p>配置 JDK的环境</p>
<ul>
<li><p>vim /etc/profile  （修改配置文件，跟Windows中环境变量一样）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> set java environment</div><div class="line">JAVA_HOME=   JDK安装路径 (/usr/local/java/jdk1.7.0_80)</div><div class="line"></div><div class="line">CLASSPATH=.:$JAVA_HOME/lib.tools.jar</div><div class="line"></div><div class="line">PATH=$JAVA_HOME/bin:$PATH</div><div class="line"></div><div class="line">export JAVA_HOME CLASSPATH PATH</div></pre></td></tr></table></figure>
</li>
<li><p>重新加载配置文件 </p>
<ul>
<li>source /etc/profile</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>注意: 每个Linux的安装方式不同!同样的我也同时更新了Ubuntu16.0的jdk安装环境.</p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[就业感言]]></title>
      <url>/%E5%B0%B1%E4%B8%9A%E6%84%9F%E8%A8%80/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1516948182165.jpg" alt=""><br>杭州，这座城市，有多太的人想留下来，想要在这里干一个属于自己的落脚地。</p>
<a id="more"></a>
<p>而想要留下来，那你就必须干掉你的对手，我们都是刚刚毕业，培训出来，根本就没有实际的开发经验，而外面的技术，又是不断的更新，这个时候，一定要坚持下来！</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1516948550945.jpg" alt=""></p>
<p>我也不瞒任何人，我在杭州一共面试45家！最后一家拿到office！</p>
<p>最开始面试的时候，我还做下总结，最后索性就这样了！</p>
<p>在面试的过程中，有跟面试官，聊得开心，各种扯，各种吹，也有跟面试官闹得不愉快！</p>
<p>很想知道为什么闹得不愉快吧，当面试官问你Java基础的时候，你没有回答上来，并且啊，你很尴尬的时候，他们笑了，你就知道怎么个不舒服了。</p>
<p>被面试官质疑我技术的时候，我有段时间心态崩了，那个时候，是在杭州有15天了，跟我一起来杭州的还有2位同学，他们在那个时候，离开了杭州这座城市！</p>
<p>为什么离开？因为这边的消耗，加上看不到一点希望的情况下，他们理性的选择了离开，而我并不甘心！</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1516948619045.jpg" alt=""></p>
<p>为什么？为什么我来这里就找不到工作？为什么我的同学好多都找到了，而我却没有？然后你要面对的就是，你的朋友，你的家人，包括你的老师，他们都会问你，工作找的怎么样？</p>
<p>我也想过跟我同学一样，选择离开。但是我不甘心啊，不甘心就这么放弃！每个人都不会觉得自己比别人差到到哪里去，可能比别人更好！</p>
<p>你仔细想想，为什么去黑马，在哪里6个月，从早上的8点到晚上的10点甚至更能晚，我付出这么多，当我要实现，我的奋斗目标的时候，而你却给我来一个大锤子。那种感觉就像是，你看到一个大蛋糕，很多人都在分，而你好不容易挤进去，一看那块蛋糕，没了。。。</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/IMG_0185.JPG" alt=""></p>
<p>就这样，同学走了，并且只有自己一个人留在这里，开始我自己的人生路。</p>
<p>接下来的时间里，我比之前更疯狂，每天的面试都安排，并且能安排4个一天面试完的，我绝不安排3个。</p>
<p>在接下的面试中，我发现自己根本不需要在做任何的面试准备，跟面试官沟通都是一个小时左右。</p>
<p>哪个时候是准备还留一个星期再回去，可是到了下个星期，又不想回去了，总感觉，我离我的目标就差那么一点点，就又坚持了下来。</p>
<p>很幸运的是，拿到了我人生中的第一份office，并且顺利进入公司！</p>
<p>请一定要记住,当你要放弃的时候,想想当初为什么来到这里!而我也是因为这样,才留在了杭州,这座美女如云的城市!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">面试技巧： </div><div class="line">	- 在自我介绍的时候，面试官想知道就是你项目的经验，和掌握的技术。</div><div class="line">	- 对于简历上写的技术，自己一定要掌握，并且了解Java基础的算法和底层。</div><div class="line">	- 对于 SSM 和SSH 都必须了解它们的区别，和为什么用它们！</div><div class="line">	- 在面试官问你还有什么想问我们公司的时候，你一定要问他们公司用什么技术，并且工作业务是什么。你问了，他就觉得，你对他们公司还是有想法的，并且最求技术！一般的面试官都会介绍他们的公司项目和业务！</div></pre></td></tr></table></figure>
<p>再给大家分享一些干货！在我的博客里，有些面试的经历，和面试问题的总结！<br>百度搜索：Stone的博客  或者直接访问 www.1314sl.com</p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[杭州面试总结-Stone_6家]]></title>
      <url>/%E6%9D%AD%E5%B7%9E%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93-Stone-6%E5%AE%B6/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p>到目前为止,我已经面试了6家左右</p>
<p>说句实在的,都不怎么样,虽然拿到一个office,但是不是很喜欢,我也不清楚是为啥,所以,来总一下问题</p>
<p>昨天,上午一家是 杭州华卓科技有限公司,进公司的第一感觉,前台的小姐姐,很标致啊,然后就是跟所有的面试一样,填一张表,然后就是等,面试官来面试.<br>等得我实在是无聊啊,看到桌上有一个魔方,拿起来玩了.</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1514522893435.jpg" alt="enter description here"></p>
<p>哈哈哈,好了,总结一下,这家公司的情况:<br>    他们主要负责的是医院那一块,就是他们要走互联网方向,什么远程看病啊,什么,什么的. 然后他们公司的开发框架 都是比较新进的框架,Spring boot,Spring Cloud 等等,还有一些我都没听过<br>    然后面试官问我一些原理和底层问题,可惜啊,我对这一块并不是很了解,如果你让我写一段代码,可能还有一些希望.<br>    然后我就大致说了一下 Spring MVC 的原理<br>    大致就是:<br>        用户请求–&gt;前端控制器–&gt;handlerAdapter–&gt;返回视图–&gt;渲染视图–&gt;把视图推送给用户<br>    但是实际的答案是这样:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1514523427943.jpg" alt="enter description here"></p>
<p>反正大致问的 比较细,也比较多.面试官还是很不错的,你不会的,或者说你答不上来的,他都会跟你说一遍那些原理.而且听他的语气来判断,这个人懂很多,而是技术宅那种吧,哈哈哈!</p>
<p>下午:<br>    远昊科技有限公司</p>
<p>一进去我就懵逼了,我就说我来面试java开发工程师的,她们人事就来了 一句  “你是孙磊吧”,行吧,我当时都是懵逼的,对,没错,就我一个在那里面试,对就是我一个人…<br>    一样的公司使用的框架也是SpringBoot,和Spring Cloud.<br>    行吧,我应该是没戏了.</p>
<p>也没什么好说的,等下晚上再更新面试的技术总结,现在准备去面试了哈哈哈!</p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[杭州面试问题总结-Stone]]></title>
      <url>/%E6%9D%AD%E5%B7%9E%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93-Stone/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p>此刻的我,享受着,咖啡+音乐 的生活,而在这么好的一个时间,我来了,我来给大家分享一下杭州的面试:</p>
<p>前天的一个总结:</p>
<p>到目前为止总共是面试了2家</p>
<p>情况是这样的<br>第一家,是他们HR拿一个面试卷子 (里面的mybatis#和$的区别 不知道,就没有写)本类是想拍照的,可是我就坐在了HR旁边….</p>
<p>面试官问我的我的问题</p>
<p> 电商秒杀活动,如何实现,(一个用户,多端登陆,手机端,客户端,web端同时登陆)为了不让同一个用户抢购到同一个商品多次,我回答不上来,然后我就说 我在上个项目里是 用消息队列,进行实现,然后用Redis来缓解服务器压力.</p>
<p> 然后又是那个问题  mybatis 的# 和$的区别 我说这个mybatis接触的不多,就上一个项目使用过.</p>
<p> 然后又问我 hibernate 查询数据库的时候 ,如果有多个条件,就是in(参数….),怎么实现,我说得是,用数组,或者集合, 接着问,那它们怎么转换成参数?我回答:他们是自动转的.</p>
<p> 然后问我上家公司的 薪资  我说12k  然后就是等通知..</p>
<p>   下午的这一家,技术总监没来,我进去的时候,他们让我在会议室等,然后我就装模作样的看了他们会议室上的一个宣告栏,是个什么 “帮你还”的APP软件,是关于信用卡还不上的那种人群使用.<br>然后,他们HR面试我,问了我一些 上家公司的情况,和主要负责的业务</p>
<p> 然后我问他,贵公司的主要业务和开发框架<br> 他回答,业务这一块,我看你刚才也在看宣告栏,大概的业务就是,关于金额方面的数字问题<br> 我回答: 我接触的金额,就是微信支付啊,支付宝啊,还有一些其他的第三方支付平台.<br> 他就开始介绍他们公司和入职的薪资(6-8k 试用期,8-12k 转正薪资).<br> 然后就没然后了,他就约我明天晚上6点去他们那边参加技术人员的面试,通过了就可以了.<br> (他们现在是 做这个软件的后期维护,紧急事件处理,新成立的一个开发部,缺人!!!)</p>
<p>然后是对于技术的一些总结,我稍后整理出来!<br><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[拦截器,过滤器,监听器的区别]]></title>
      <url>/%E6%8B%A6%E6%88%AA%E5%99%A8-%E8%BF%87%E6%BB%A4%E5%99%A8-%E7%9B%91%E5%90%AC%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><h3 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器(Filter)"></a>过滤器(Filter)</h3><p>(它是Servlet技术中最实用的技术)</p>
<ul>
<li><p>一般是通过Filter来对请求(Request)对象和响应(Response)对象,进行拦截</p>
</li>
<li><p>在HttpServletRequest 到达 Servlet 之前，拦截客户的 HttpServletRequest 。 根据需要检查 HttpServletRequest ，也可以修改HttpServletRequest 头和数据。</p>
</li>
<li><p>在HttpServletResponse 到达客户端之前，拦截HttpServletResponse 。 根据需要检查 HttpServletResponse ，也可以修改HttpServletResponse头和数据</p>
<h4 id="实现过滤"><a href="#实现过滤" class="headerlink" title="实现过滤"></a>实现过滤</h4></li>
<li><p>创建一个类,实现Filter接口,并重写doFilter方法</p>
</li>
<li><p>WEB服务器每次在调用web资源的service方法之前，都会先调用一下filter的doFilter方法</p>
</li>
<li><p>在 web.xml 文件中使用<filter>和<filter-mapping>进行配置</filter-mapping></filter></p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4></li>
<li><p>Filter的创建和销毁由WEB服务器负责</p>
</li>
<li><p>web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能</p>
</li>
<li><p><code>* filter对象只会创建一次，init方法也只会执行一次</code></p>
</li>
<li><p>当用户访问与过滤器设置的URL的时候,Servlet会先走doFIle()方法</p>
</li>
<li>Filter对象,创建以后是跟随web服务器停止而销毁.<h4 id="处理乱码"><a href="#处理乱码" class="headerlink" title="处理乱码"></a>处理乱码</h4></li>
<li><p>在项目开发中,使用Spring框架的时候,前台的JSP页面和JAVA代码使用不同的字符集编码,从而导致 乱码.</p>
</li>
<li><p>而这个时候最好使用过滤器,在每次客户请求,在dofilter()方法中,处理乱码,那就不会出现乱码了,也不用每次获取值得时候,来转码了</p>
</li>
</ul>
<h3 id="Listener-监听器-3种监听"><a href="#Listener-监听器-3种监听" class="headerlink" title="Listener 监听器(3种监听)"></a>Listener 监听器(3种监听)</h3><h4 id="ServletContext监听"><a href="#ServletContext监听" class="headerlink" title="ServletContext监听"></a>ServletContext监听</h4><p><code>ServletContextListener</code> 用于对Servlet整个上下文进行监听(创建和销毁)<br><code>ServletContextAttributeListener</code> 对Servlet上下文属性的监听（增删改属性）。</p>
<h4 id="Session监听"><a href="#Session监听" class="headerlink" title="Session监听"></a>Session监听</h4><p><code>HttpSessionListener接口</code>：对Session的整体状态的监听。<br><code>HttpSessionAttributeListener接口</code>：对session的属性监听。</p>
<ul>
<li><h4 id="session超时，web-xml配置："><a href="#session超时，web-xml配置：" class="headerlink" title="session超时，web.xml配置："></a>session超时，web.xml配置：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;session-config&gt;</div><div class="line"></div><div class="line">    &lt;session-timeout&gt;120&lt;/session-timeout&gt;&lt;!--session120分钟后超时销毁--&gt;</div><div class="line"></div><div class="line">&lt;/session-config&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Request监听"><a href="#Request监听" class="headerlink" title="Request监听"></a>Request监听</h4><p><code>ServletRequestListener</code>：用于对Request请求进行监听（创建、销毁）。<br><code>ServletRequestAttributeListener</code>：对Request属性的监听（增删改属性）。</p>
<ul>
<li><h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><ul>
<li>既是对整个Servlet中,所有对象的创建和销毁监听,对对象的增删改,属性进行监听,如果有什么需求,是在某个对象创建的时候,要做的事情,那就在在对象创建的时候,实施监听,并且监听创建的方法里,做要做的事情</li>
<li>.同理,要是要对某个对象进行添加操作,而又想在控制台看见,那么一样的,在对象添加的时候,添加监听器,然后再添加前,只需要加一条输出语句即可<h3 id="拦截器-Interceptor"><a href="#拦截器-Interceptor" class="headerlink" title="拦截器(Interceptor)"></a>拦截器(Interceptor)</h3></li>
<li><p>与上面2个器不同的是,拦截器不属于Servlet,而是struts框架的</p>
</li>
<li><p>拦截器是基于Java反射机制实现的,这点跟JDK的动态代理有点像</p>
</li>
<li>java里的拦截器是动态拦截Action调用的对象，它提供了一种机制可以使开发者在一个Action执行的前后执行一段代码，也可以在一个Action</li>
<li>在AOP中，拦截器用于在某个方法或者字段被访问之前，进行拦截,然后再之前或者之后加入某些操作 (AOP介绍,请访问 www.1314sl.com 的 Spring两大特性)</li>
<li>当一个请求到 ServletDispatcher的时候,Struts2会查找配置文件，并根据配置实例化相对的拦截器对象,对相关的操作进行拦截,然后再执行具体方法前,添加你自己的处理操作,然后进入请求的具体方法<br>   有点类似面向切片的技术(即AOP切面 是真的有点像)</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><pre><code>过滤器
    在客户请求到服务器的时候,请求对象传入的request,Response,前,过滤掉一些信息,或者设置一些参数,在传入Servlet或者struts的Action处理.
监听器
    监听器随web服务的启动而启动,WEB服务的停止而停止,Servlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。(比如某个对象的创建和销毁)
拦截器
    拦截器是动态拦截Action调用的对象,并且在执行对象方法前,可以做一些操作,也可以添加一些功能.而不影响核心功能
</code></pre><p>思维导图如下:</p>
<h5 id="作者博客-1"><a href="#作者博客-1" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/%E8%BF%87%E6%BB%A4%E5%99%A8,%E6%8B%A6%E6%88%AA%E5%99%A8,%E7%9B%91%E5%90%AC%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="@Stone" title="过滤器,拦截器,监听器的区别"></p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code>  <a href="http://www.1314sl.com">@作者博客</a></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSH三大框架的工作原理及流程]]></title>
      <url>/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="SSH三大框架的工作原理及流程"><a href="#SSH三大框架的工作原理及流程" class="headerlink" title="SSH三大框架的工作原理及流程"></a>SSH三大框架的工作原理及流程</h1><pre><code>Hibernate工作原理及为什么要用?
    原理
        通过Configuration().configure();读取并解析hibernate.cfg.xml配置文件
        由hibernate.cfg.xml中的&lt;mapping resource=&quot;com/xx/User.hbm.xml&quot;/&gt;读取并解析映射信息
        通过config.buildSessionFactory();//创建SessionFactory
        .sessionFactory.openSession();//打开Sesssion
        .session.beginTransaction();//创建事务Transation
        persistent operate持久化操作
        session.getTransaction().commit();//提交事务
        .关闭Session
        关闭SesstionFactory
    为什么要用?
        对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。
        Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作
         hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。
        hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。
    Hibernate的查询方式
        Sql、Criteria,object comptosition
</code></pre><p>Hql：<br>1、 属性查询<br>2、 参数查询、命名参数查询<br>3、 关联查询<br>4、 分页查询<br>5、 统计函数<br>    Struts工作机制？为什么要使用Struts<br>        Struts的工作流程:<br>            在web应用</p>
<ul>
<li>启动时就会加载初始化ActionServlet,ActionServlet从<br>struts-config.xml文件中读取配置信息,把它们存放到各种配置对象<br>当ActionServlet接收到一个客户请求时,将执行如下流程.</li>
</ul>
<h4 id="检索和用户请求匹配的ActionMapping实例-如果不存在-就返回请求路径无效信息-如果ActionForm实例不存在-就创建一个ActionForm对象-把客户提交的表单数据保存到ActionForm对象中"><a href="#检索和用户请求匹配的ActionMapping实例-如果不存在-就返回请求路径无效信息-如果ActionForm实例不存在-就创建一个ActionForm对象-把客户提交的表单数据保存到ActionForm对象中" class="headerlink" title="检索和用户请求匹配的ActionMapping实例,如果不存在,就返回请求路径无效信息;如果ActionForm实例不存在,就创建一个ActionForm对象,把客户提交的表单数据保存到ActionForm对象中;"></a>检索和用户请求匹配的ActionMapping实例,如果不存在,就返回请求路径无效信息;如果ActionForm实例不存在,就创建一个ActionForm对象,把客户提交的表单数据保存到ActionForm对象中;</h4><ul>
<li>根据配置信息决定是否需要表单验证.如果需要验证,就调用ActionForm的validate()方法; </li>
<li>如果ActionForm的validate()方法返回null或返回一个不包含ActionMessage的ActuibErrors对象, 就表示表单验证成功; </li>
<li>ActionServlet根据ActionMapping所包含的映射信息决定将请求转发给哪个Action,如果相应的 Action实例不存在,就先创建这个实例,然后调用Action的execute()方法; </li>
<li>Action的execute()方法返回一个ActionForward对象,ActionServlet在把客户请求转发给 ActionForward对象指向的JSP组件;<br>-ActionForward对象指向JSP组件生成动态网页,返回给客户;<h4 id="为什么要用："><a href="#为什么要用：" class="headerlink" title="为什么要用："></a>为什么要用：</h4></li>
<li>JSP、Servlet、JavaBean技术的出现给我们构建强大的企业应用系统提供了可能。但用这些技术构建的系统非常的繁乱，所以在此之上，我们需要一个规则、一个把这些技术组织起来的规则，这就是框架，Struts便应运而生。</li>
<li>基于Struts开发的应用由3类组件构成：控制器组件、模型组件、视图组件</li>
</ul>
<p>Sping 简单分析<br>        Spring Web MVC 处理Http请求的大致过程：<br>        一旦Http请求到来，DispatcherSevlet将负责将请求分发。<br>        DispatcherServlet可以认为是Spring提供的前端控制器，<br>        所有的请求都有经过它来统一分发。<br>        在DispatcherServlet将请求分发给Spring Controller之前，<br>        需要借助于Spring提供的HandlerMapping定位到具体的Controller。<br>        HandlerMapping是这样一种对象，它能够完成客户请求到Controller之间的映射。<br>        在Struts中，这种映射是通过struts-config.xml文件完成的。<br>        其中，Spring为Controller接口提供了若干实现，<br>        例如Spring默认使用的BeanNameUrlHandlerMapping。<br>        还有，SimpleUrlHandlerMapping，CommonsPathMapHandlerMapping。<br>        Spring Controller将处理来自DispatcherServlet的请求。<br>        Spring的Controller类似于struts的Action，<br>        能够接受HttpServletRequest和HttpServletResponse。<br>        Spring为Controller接口提供了若干实现类，<br>        位于org.springframework.web.servlet.mvc包中。<br>        由于Controller需要为并发用户处理上述请求，因此实现Controller接口时，</p>
<p>必须保证线程安全并且可重用。Controller将处理客户请求，<br>        这和Struts Action 扮演的角色是一致的。<br>        一旦Controller处理完客户请求，则返回ModelAndView对象<br>        给DispatcherServlet前端控制器。<br>        ModelAndView中包含了模型（Model）和视图（View）。<br>        从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；<br>        从微观角度考虑，Controller是单个Http请求处理过程中的控制器，<br>        而ModelAndView是Http请求过程中返回的模型和视图。<br>        前端控制器返回的视图可以是视图的逻辑名，或者实现了View接口的对象。<br>        View对象能够渲染客户响应结果。其中，ModelAndView中的模型<br>        能够供渲染View时使用。借助于Map对象能够存储模型。<br>        如果ModelAndView返回的视图只是逻辑名，则需要借助Spring提供的<br>        视图解析器（ViewResoler）在Web应用中查找View对象，<br>        从而将响应结果渲染给客户。<br>        DispatcherServlet将View对象渲染出的结果返回个客户。</p>
<p>思维导图如下:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/SSH%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B.jpg" alt="enter description here" title="SSH三大框架的工作原理及流程"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BOS技术整合-03]]></title>
      <url>/BOS%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88-03/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><ol>
<li>SpringDataJpa原理分析和基本API</li>
</ol>
<p>原理分析<br> Spring data 出现目的 为了简化、统一 持久层 各种实现技术 API<br>所以 spring data 提供一套标准 API 和 不同持久层整合技术实现<br>API<br> jar 包<br> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149463347.jpg" alt="enter description here" title=" "></p>
<p>自己开发 Repository 只需要继承 JpaRepository 接口, 就可以享有父接口的功能<br>CrudRepository<br>save、 delete、 deteleAll、 findAll、 findOne、 count<br>PagingAndSortingRepository<br>findAll(Sort) 基于排序的查询、 findAll(Pageable) 基于分页的查询</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149451163.jpg" alt="enter description here" title=" "></p>
<p>springDataJpa查询Query的使用<br>   第一种 根据方法命名规则自动生成<br> 1)基于一列查询等值查询 findBy 列名 例如： findByName(String name);</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149436266.jpg" alt="enter description here" title=" "></p>
<p>2)基于一列模糊查询 findBy 列名 Like 例如： findByNameLike(String name)<br>3)基于两列等值查询 findBy 列名 And 列名 例如：<br>     findByUsernameAndPassword(String username, String password )<br>第二种 不按命名规则写的查询方法，可以配置@Query 绑定 JPAL 语句或者 SQL 语句</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149412768.jpg" alt="enter description here" title=" "></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149408554.jpg" alt="enter description here" title=" "></p>
<p>第三种 不按命名规则写的查询方法 配置@Query 没写语句，实体类 @NamedQuery 定义</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149401281.jpg" alt="enter description here" title=" "></p>
<p>SpringDataJpa修改操作Query使用</p>
<p>使用@Query 注解完成 ， 搭配使用@Modifying 标记修改、删除操作<br>将记录 1 的 最小长度改为 15</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149395422.jpg" alt="enter description here" title=" "></p>
<p>注意:方法参数位置顺序,如果在sql语句中参数没有标明位置,那么需要方法参数对调.<br>注意： 使用单体测试，测试 DAO ，要添加事务，设置事务不回滚 </p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149378481.jpg" alt="enter description here" title=" "></p>
<ol>
<li>datagrid分页</li>
</ol>
<p>分页的分析:</p>
<p>请求数据： page 页码、 rows 每页记录数<br>响应数据： total 总记录数、 rows 当前页数据记录<br>分页列表查询实现</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149368194.jpg" alt="enter description here" title=" "></p>
<p>添加 pageQuery 方法<br>页面会自动发送两个请求参数 page 页码、 rows 每页记录数</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149360330.jpg" alt="enter description here" title=" "></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149356132.jpg" alt="enter description here" title=" "></p>
<p>Spring data jpa 提供 分页查询方法 ，接受 Pageable 参数</p>
<p>提供 PageRequest 对象实现 Pageable 接口</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149347008.jpg" alt="enter description here" title=" "></p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149343297.jpg" alt="enter description here" title=" "></p>
<p>编码流程<br>1.修改 standard.html 数据表格 url 参数<br>2.在 StandardAction 添加 pageQuery 方法<br>  1)pom.xml 导入 json 插件<br>  2)Action中使用json插件需要继承json-default<br>  3)设置结果集的type=”json”<br>  4)将结果集压人值栈顶部<br>3.接口StandardService中的方法<br>Page<standard> findPageData(Pageable pageable);<br>4.实现类StandardServiceImpl中的方法<br>    public Page<standard> findPageData(Pageable pageable) {<br>        return standardRepository.findAll(pageable);<br>    }</standard></standard></p>
<ol>
<li>收派标准修改功能实现</li>
</ol>
<p>注意: 修改只能对一行进行修改!<br> 点击 修改按钮,获取 gatagrid 选中的一行数据</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149331495.jpg" alt="enter description here" title=" "></p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149320351.jpg" alt="enter description here" title=" "></p>
<p>将选中数据 回显 form 表单<br>使用 jquery easyui 提供 form 对象</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149314202.jpg" alt="enter description here" title=" "></p>
<p>在用户点击保存的时候,为这个按钮添加点击事件(click)操作<br>判断 所有表单对象都通过校验<br>通过,就提交<br>不通过,就弹窗,警告!</p>
<ol>
<li>数据表格datagrid简单使用</li>
</ol>
<p>datagrid可以使用JS控制生成,也可以在页面元素table标签上定义,那么咱们先看在页面使用table元素<br>需要注意的三个</p>
<p>在table标签class=”easyui-datagrid”</p>
<p>在table标签 data-options=”url:’datagrid_data.json’,fitColumns:true,singleSelect:true</p>
<p>在table标签内th data-options=”field:’code’,width:100” 其中filed指的是json文件中对应的字段名称</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149283927.jpg" alt="enter description here" title=" "></p>
<p>JS控制datagrid<br>在页面显示表格的位置 提供<table>标签，指定 id 元素<br><!-- 数据表格 --></table></p>
<table id="grid"></table>

<p>在 JS 代码 $(“#grid”).datagrid({…}); 完成对表格设置</p>
<p>远程数据加载(url:”product.json”)</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149270603.jpg" alt="enter description here" title=" "></p>
<p>分页(pagination:true):数据只有做成动态的数据分页才有实际效果</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149255579.jpg" alt="enter description here" title=" "></p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149246737.jpg" alt="enter description here" title=" "></p>
<ol>
<li>快递员的CRUD</li>
</ol>
<p>添加</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149233195.jpg" alt="enter description here" title=" "> </p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149227831.jpg" alt="enter description here" title=" "></p>
<p><code>&lt;input type=&quot;text&quot; name=&quot;standard.id&quot;  class=&quot;easyui-combobox&quot; 
    data-options=&quot;required:true,valueField:&#39;id&#39;,textField:&#39;name&#39;,
    url:&#39;../../standard_findAll.action&#39;&quot;/&gt; //url 请求地址</code> </p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149216741.jpg" alt="enter description here" title=" "></p>
<p>查询</p>
<p>Action 层代码</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149171002.jpg" alt="enter description here" title=" "></p>
<p>Service 层代码</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149153957.jpg" alt="enter description here" title=" "></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149141799.jpg" alt="enter description here" title=" "></p>
<p>还原快递员(同理跟作废相反即可)</p>
<p>作废快递员</p>
<p>Action 层</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149131490.jpg" alt="enter description here" title=" "></p>
<p>Service 层</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149108553.jpg" alt="enter description here" title=" "></p>
<p>Dao层</p>
<p> <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149082051.jpg" alt="enter description here" title=" "></p>
<p>前端请求</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1512149069073.jpg" alt="enter description here" title=" "></p>
<p>思维导图如下:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/BOS%20%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86-03.jpg" alt="enter description here" title="BOS 技术整理-03"></p>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code>  <a href="http://www.1314sl.com">@作者博客</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate的二级缓存]]></title>
      <url>/Hibernate%E7%9A%84%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p>Hibernate的二级缓存</p>
<ul>
<li><p>二级缓存(外置缓存)</p>
<ul>
<li><p>可以跨多个session，即不同的session都可以访问缓存数据</p>
<p>   <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1511931225941.jpg" alt="enter description here"></p>
</li>
</ul>
</li>
<li><p>一级缓存(内置缓存)</p>
<pre><code>- Hibernate的一级缓存就是指Session缓存
- 在Session中定义了一系列的集合来存储数据，它们构成了Session的缓存。只要Session没有关闭，它就会一直存在。当我们通过Hibernate中的Session提供的一些API例如save()、get()、update()等进行操作时，就会将持久化对象保存到Session中，当下一次再去查询缓存中具有的对象(通过OID值来判断)，就不会去从数据库中查询了，而是直接从缓存中获取。Hibernate的一级缓存存在的目的就是为了减少对数据库的访问。 
</code></pre><h4 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h4></li>
<li>瞬时状态：使用new操作符初始化的对象的状态就是瞬时的，</li>
<li>持久状态：在session的缓存中，</li>
<li>脱管状态：从session的缓存中移除出来了</li>
</ul>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul>
<li>当Hibernate根据ID访问数据对象的时候，首先会从Session一级缓存中查找，如果查不到并且配置了二级缓存，那么会从二级缓存中查找，如果还查不到，就会查询数据库，把结果按照ID放入到缓存中。</li>
<li>Hibernate的二级缓存作为一个可插入的组件在使用的时候也是可以进行配置的，但并不是所有的对象都适合放在二级缓存中</li>
<li>在我实际开发中,如果 是很少被修改的数据,不是很重要的数据,都放入二级缓存中</li>
<li>而那些经常修改的数据,还有绝对不允许出现并发的,还有与其他应用共享的数据,都不会放入二级缓存</li>
</ul>
<p><code>© 著作权归作者所有</code> <code>转载请保留原链接地址</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring的两大特征和事务管理]]></title>
      <url>/Spring%E7%9A%84%E4%B8%A4%E5%A4%A7%E7%89%B9%E5%BE%81%E5%92%8C%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><h3 id="Spring-两大特性"><a href="#Spring-两大特性" class="headerlink" title="Spring 两大特性"></a>Spring 两大特性</h3><h4 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h4><ul>
<li><p>IOC是什么?</p>
<ul>
<li><p>IOC是一种思想,是一个重要的面向对象编程的体现之一</p>
</li>
<li><p>传统的应用程序是由我们在类的内部主动创建依赖对象,从而导致类与类之间高耦合,测试也繁琐. 相对于IOC而言,它是把创建和查找依赖对象的控制器交给了容器,有容器进行注入组合对象,所以对象与对象之间是,低耦合的,便于测试,而且也使得整个体系架构变得更灵活</p>
</li>
<li><p>IOC的面向对象思想就好像 ,百度百科上对这点描述是“不要给我们打电话，我们会给你打电话(don‘t call us, we‘ll call you)”这是著名的好莱坞原则;<br>其实说简单一点,就是对象找依赖并注入,而不是对象自己主动去找</p>
</li>
</ul>
</li>
<li>IOC依赖注入<ul>
<li>在控制反转中获取资源的过程叫做依赖注入<ul>
<li>构造器注入:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">		这种方式的注入是指带有参数的构造函数注入</div><div class="line">		在XML文件中 配置注入对象</div><div class="line">```	</div><div class="line">- setter注入</div><div class="line">```	</div><div class="line">	* 要写被注入对象的Set方法</div><div class="line">	* 在XML中配置 ,要注入的具体对象(是由Spring管理的对象) </div><div class="line">	* 在Spring的xml配置文件中,配置相关的Bean(也叫托管),由Spring来管理对象</div><div class="line">	* 也是在配置好 Bean 以后,由Spring自动注入</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h3><p>(可以说是,补全了OOP(面向对象编程)的不足的地方)</p>
<ul>
<li><p>举个例子,日志功能,它往往是遍布在所有对象层中,而它又在核心功能中毫无关系,这种被散布在各处无关的代码 被称为横切,在oop设计中,它导致了大量代码的重复;</p>
</li>
<li><p>AOP技术却相反,它利用一种 叫 “横切”的技术,解剖开封装的对象内部,并将影响了多个类的公共行为封装到一个版块,这个版块叫 “Aspect(啊死拜)”,又称切面.</p>
</li>
<li>切面,简单的说,就是那些与业务无关的,却又不可少的那一部分,封装起来,减少系统的重复代码,减低各个版块直接的耦合度,有利于维护和可操作性</li>
<li>AOP把软件系统分为两个部分：核心关注点和横切关注点<ul>
<li>业务处理的主要流程是核心关注点</li>
<li>与之关系不大的部分是横切关注点</li>
</ul>
</li>
</ul>
<h3 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h3><ul>
<li>横切关注点</li>
<li>切面（aspect）</li>
<li>连接点（joinpoint）</li>
<li>切入点（pointcut）</li>
<li>通知（advice）</li>
<li>目标对象</li>
<li>织入（weave）</li>
<li>引入（introduction）</li>
</ul>
<h3 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h3><ul>
<li><p>声明式事务管理建立在AOP之上的</p>
<ul>
<li><p>其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务</p>
</li>
<li><p>声明式事务最大的优点就是不需要在代码中写管理事务的代码<br>只需在配置文件中声明和配置事物管理即可(或通过基于@Transactional注解的方式)</p>
</li>
</ul>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1511626915760.jpg" alt=""></p>
</li>
</ul>
<p>思维图如下:</p>
<h5 id="作者博客-1"><a href="#作者博客-1" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/Spring%20%E4%B8%A4%E5%A4%A7%E7%89%B9%E6%80%A7.jpg" class="full-image"></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/Spring%20%E4%B8%A4%E5%A4%A7%E7%89%B9%E6%80%A7.jpg" alt="enter description here" title="Spring 两大特性以及事务管理"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[websevice的原理及使用方法]]></title>
      <url>/websevice%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h5 id="作者博客"><a href="#作者博客" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><h3 id="WebSerivce是什么"><a href="#WebSerivce是什么" class="headerlink" title="WebSerivce是什么?"></a>WebSerivce是什么?</h3><ul>
<li><p>WebService是基于网络的、分布式的模块化组件。(是通过XML和Http协议为基础,进行通信的框架)</p>
<h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul>
<li><p>跨平台 。  任何平台都可以使用WebService</p>
</li>
<li><p>编程语言无关系。 基于XML，XML本身与平台无关</p>
</li>
<li><p>部署、升级和维护Web服务简单、方便。</p>
</li>
<li><p>实现多数据、多服务的聚合</p>
</li>
<li><p>不受防火墙的影响(XML文件 转为二进制发送,不需要多开端口)</p>
</li>
<li><p>成本低(免费)</p>
</li>
<li><p>主要分为两种服务提供方式WS 、RS,两种方式底层通信协议不同</p>
<pre><code>JAX-WS传输的就是xml格式的数据,基于soap协议
 JAX-RS传输的是xml或者json的数据, 基于http协议
</code></pre><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>1.客户端调用 服务端提供的接口</p>
</li>
</ul>
</li>
</ul>
<p>2.服务端WebService处理 请求,调用WebService响应方法</p>
<p>3.服务器返回数据给客户端</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="WS-服务"><a href="#WS-服务" class="headerlink" title="WS 服务"></a>WS 服务</h4><ul>
<li>创建WebService项目以后,导入CXF的jar 包支持</li>
<li>再编写服务的接口上,加上 @WebService (表示 服务提供对象)</li>
<li>在接口的方法上加上 @WebMethod (表示服务提供方法)</li>
<li>编写客户端测试,发布服务,测试访问地址是否有效</li>
</ul>
<h3 id="RS服务"><a href="#RS服务" class="headerlink" title="RS服务"></a>RS服务</h3><ul>
<li>在接口上加 @Path 服务访问资源路径</li>
<li>在方法上加 @Path 方法访问路径</li>
<li>在方法上加 @GET 查询 @PUT 修改 @POST 增加 @DELETE 删除</li>
<li>在方法上 @Consumes 指定能够处理客户端传递过来数据格式</li>
<li>在方法上 @Produces 指定能够生成哪种格式数据返回给客户端</li>
<li>同样的编写客户端代码,测试</li>
</ul>
<p>注意!!(开发常用的是RS风格的WebService)</p>
<p>思维导图如下 (<a href="http://www.1314sl.com">@博客</a>):</p>
<h5 id="作者博客-1"><a href="#作者博客-1" class="headerlink" title="@作者博客"></a><a href="http://www.1314sl.com">@作者博客</a></h5><p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/websevice%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.jpg" alt="enter description here" title="websevice的原理及使用方法"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hashtable和HashSet的区别]]></title>
      <url>/Hashtable%E5%92%8CHashSet%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>作者博客<a href="http://www.1314sl.com">@Stone原地址</a></p>
<h4 id="HashMap和Hashtable都实现了Map接口-但决定用哪一个之前先要弄清楚它们之间的分别"><a href="#HashMap和Hashtable都实现了Map接口-但决定用哪一个之前先要弄清楚它们之间的分别" class="headerlink" title="HashMap和Hashtable都实现了Map接口 但决定用哪一个之前先要弄清楚它们之间的分别"></a>HashMap和Hashtable都实现了Map接口 但决定用哪一个之前先要弄清楚它们之间的分别</h4><ul>
<li>主要的是线程安全性，同步(synchronization)，以及速度</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li><p>HashMap是非synchronized的，并可以接受null   (HashMap可以接受为null的键值(key)值(value)，而Hashtable则不行)。</p>
</li>
<li><p>HashMap是非synchronized，而Hashtable是synchronized,这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；</p>
</li>
<li><p>而HashMap如果没有正确的同步的话，多个线程是不能共享HashMap的</p>
</li>
<li><p>由于Hashtable是线程安全的也是synchronized，所以在单线程环境下它比HashMap要慢。如果你不需要同步，只需要单一线程，那么使用HashMap性能要好过Hashtable。</p>
<h3 id="重要的说一下他们存储空值出现的问题"><a href="#重要的说一下他们存储空值出现的问题" class="headerlink" title="重要的说一下他们存储空值出现的问题"></a>重要的说一下他们存储空值出现的问题</h3></li>
<li>Hashtable中，key和value都不允许出现null值。但是如果在Hashtable中有添加空值得操作,编译是会通过,但是在运行的时候就会,抛出NullPointerException异常，这是JDK的规范规定的。</li>
<li><p>HashMap中，null可以作为键，但是null的key键只能有一个</p>
<ul>
<li>而这个时候要注意,不能用get()方法,来判断 HashMap中是否存在某个键， 而应该用containsKey()方法来判断</li>
</ul>
</li>
<li><p>他们哈希值的使用不同，HashTable直接使用对象的hashCode。而HashMap重新计算hash值。</p>
<ul>
<li>hashCode是jdk根据对象的地址或者字符串或者数字算出来的int类型的数值</li>
<li>而HashMap重新计算了key的hash值 (!这里我也不知道对不对)<h3 id="内部实现使用的数组初始化不同"><a href="#内部实现使用的数组初始化不同" class="headerlink" title="内部实现使用的数组初始化不同"></a>内部实现使用的数组初始化不同</h3></li>
</ul>
</li>
<li>HashTable在不指定容量的情况下的默认容量为11，而HashMap为16</li>
</ul>
<h3 id="如何让HashMap-安全列"><a href="#如何让HashMap-安全列" class="headerlink" title="如何让HashMap 安全列?"></a>如何让HashMap 安全列?</h3><ul>
<li>最好,也是最常用的是,让HashMap的线程安全,那就给它加死锁(同步)</li>
</ul>
<p>思维导图如下(作者博客<a href="http://www.1314sl.com">@Stone原地址</a>):</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/hashtable%E5%92%8Chashmap%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="enter description here" title="hashtable和hashmap的区别"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate中get和load的区别]]></title>
      <url>/Hibernate%E4%B8%ADget%E5%92%8Cload%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>作者博客<a href="http://www.1314sl.com">@Stone原地址</a></p>
<ul>
<li><p>在Hibernate中如果要从数据库中得到一个对象 两种方法</p>
<ul>
<li>通过session.get()方法</li>
<li>通过session.load()方法</li>
</ul>
</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul>
<li><p>load加载方式</p>
<ul>
<li><p>当使用load方法来得到一个对象时，此时hibernate会使用延迟加载的机制来加载这个对象</p>
</li>
<li><p>当使用session.load() 方法加载一个对象的时候,并不会发出SQL语句,这个对象其实就是一个代理对象,而这个代理对象只是保存实体对象的id值,只有当我们使用这个对象,得到其他属性的时候,这个时候才会发出SQL语句,从数据库中查询相对于的对象</p>
</li>
</ul>
</li>
<li><p>get加载方式</p>
<ul>
<li>相对于load的延迟加载方式，get就直接的多，当我们使用session.get()方法来得到一个对象时，不管我们使不使用这个对象，此时都会发出sql语句去从数据库中查询出来：</li>
</ul>
</li>
</ul>
<h3 id="如果对象不存在（报错区别）"><a href="#如果对象不存在（报错区别）" class="headerlink" title="如果对象不存在（报错区别）"></a>如果对象不存在（报错区别）</h3><ul>
<li>如果这个对象不存,通过get方式,去数据库中查询出该对象，但是这个不存在,所以id值页不存在，所以此时对象是null，所以就会报NullPointException的异常了(空指针异常)。</li>
<li>如果使用load方式来加载对象，当我们试图得到这个不存在的对象 的id值的时候，此时会报ObjectNotFoundException异常(对象未找到异常)</li>
</ul>
<h3 id="对象都不存在为什么报的异常不同"><a href="#对象都不存在为什么报的异常不同" class="headerlink" title="对象都不存在为什么报的异常不同?"></a>对象都不存在为什么报的异常不同?</h3><ul>
<li>是因为load的延迟加载机制，使用load时，此时的user对象是一个代理对象，仅仅保存了当前的这个id值，当我们试图得到该对象的username属性时，这个属性其实是不存在的，所以就会报出ObjectNotFoundException这个异常了</li>
</ul>
<p>思维导图如下：作者博客<a href="http://www.1314sl.com">@Stone原地址</a></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/hibernate%E4%B8%ADget%E5%92%8Cload%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="enter description here" title="hibernate中get和load的区别"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux常用命令以及war包部署]]></title>
      <url>/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8Awar%E5%8C%85%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>Linux常用命令以及项目部署</p>
<ul>
<li><p>常用命令</p>
<ul>
<li><p>ls命令</p>
<ul>
<li>ls -a 列出目录所有文件，包含以.开始的隐藏文件<br>  ls -l t*<pre><code>列出当前目录中所有以“t”开头的目录的详细内容
</code></pre>  列出文件绝对路径（包含隐藏文件）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find $pwd -maxdepth 1 | xargs ls -ld</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>cd命令</p>
<pre><code>切换当前目录
（1）进入要目录
</code></pre><p>   cd /</p>
<p>   （2）进入”家”目录</p>
<p>   cd ~</p>
</li>
<li><p>pwd命令</p>
<pre><code>查看当前工作目录路径
</code></pre><ul>
<li>mkdir<br>  创建文件夹</li>
<li>mkdir -p  如果指定目录不存在 则创建目录</li>
</ul>
</li>
<li><p>rm命令</p>
<pre><code>  删除一个目录中的一个或多个文件或目录，如果没有使用- r选项，则rm不会删除目录
删除test子目录及子目录中所有档案删除,并且不用一一确认
</code></pre><ul>
<li><p>rm -rf test</p>
<p> 删除以-f开头的文件</p>
</li>
<li><p>rm – -f*<br>rmdir命令<br> 从一个目录中删除一个或多个子目录项<br>!!!   注意：不能删除非空目录</p>
</li>
</ul>
</li>
<li>mv命令<pre><code>移动文件或修改文件名
将文件test.log重命名为test1.txt 
</code></pre><ul>
<li>mv test.log test1.txt</li>
</ul>
</li>
<li>cp命令<pre><code>将源文件复制至目标文件，或将多个源文件复制至目标目录。
</code></pre></li>
<li>locate命令<pre><code>locate通过搜寻系统内建文档数据库达到快速找到档案，数据库由updatedb程序来更新，
</code></pre></li>
<li>find<pre><code>用于在文件树中查找文件，并作出相应的处理
</code></pre></li>
<li>chmod命令<pre><code>用于改变linux系统文件或目录的访问权限。
</code></pre></li>
<li>tar命令<pre><code>用来压缩和解压文件。tar
</code></pre></li>
<li><p>grep</p>
<pre><code>强大的文本搜索命令
  命令格式：
</code></pre><ul>
<li><p>grep [option] pattern file|dir</p>
<ul>
<li><p>常用参数：</p>
</li>
<li><p>A n –after-context显示匹配字符后n行</p>
</li>
<li><p>B n –before-context显示匹配字符前n行</p>
</li>
<li><p>C n –context 显示匹配字符前后n行</p>
</li>
<li><p>c –count 计算符合样式的列数</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>top 显示进程</p>
<pre><code>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等
</code></pre></li>
<li>vim    <pre><code>文本编写命令
</code></pre><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3>1.在linux系统中 先创建JDK和tomcat软件的存放路径<br>2.下载tomcat 和JDK<br>3.用FTP传输工具 传输(我使用的filezilla)<br>4.文件传输完成以后,再进入到/root 根目录下,/root 目录<br>5.移动或者Copy 到创建好的JDK和tomcat文件夹<br>6.解压,并安装<br>7.配置 JDK 环境变量(Vim /ect/profile)<br>8.刷新环境变量  source /etc/profile<br>9.配置tomcat环境变量</li>
</ul>
</li>
<li>source /etc/profile</li>
<li>然后 再把工程 Copy 到 tomcat的 webapps下面</li>
<li>然后启动tomcat (就可以了)</li>
</ul>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%BB%A5%E5%8F%8A%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2.jpg" alt="enter description here" title="Linux常用命令以及项目部署"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线程和进程的区别?以及如何实现多线程]]></title>
      <url>/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB-%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>简单的来说</p>
<ul>
<li><p>一个程序至少有一个进程,一进程至少有一个线程</p>
</li>
<li><p>线程的划分大小小于进程,所以使得多线程程序的并发性能高!</p>
</li>
<li><p>而且,进程在执行的过程中,有着自己独立的内存单元,而多个线程共享内存,从而极大的提高了程序的运行效率.</p>
</li>
</ul>
<h4 id="而他们的区别在于"><a href="#而他们的区别在于" class="headerlink" title="而他们的区别在于:"></a>而他们的区别在于:</h4><pre><code>每个独立的线程有一个程序运行入口,顺序执行序列和程序的出口.
但是线程不能够独立运行,必须是依赖程序,由程序提供多个个线程的执行控制!
从逻辑上看,多线程的意义在于一个程序中,有多个执行部分可以同时执行.但操作系统并没有将多个线程看做多个独立的应用,来实现进程的管理和资源分配,这是最重要的区别,也是最大的不同.
</code></pre><h4 id="为什么这么说列"><a href="#为什么这么说列" class="headerlink" title="为什么这么说列?"></a>为什么这么说列?</h4><pre><code>* 进程,是一个具有独立功能的程序,关于某个数据集合上的一次远行活动,进程是系统进行资源分配和管理的独立单位.
* 线程是进程的一个实体,是cpu在调度和分配的基本单位.
* 线程自己基本上不拥有系统的资源,它只是有一些运行必不可少的资源但是它可以与同一进程中的其他线程共享进程所拥有的全部资源

!! 这同时也是 多线程的安全问题
因为多个线程同时访问同一个数据,而现在的cpu 主频,最低的也是1GHz吧, 也就是说 cpu 高达每秒几十亿的计算,你同一条数据,在 几个线程中,以几十亿的概率被几个线程同时访问,不出现安全性才怪!
(如何解决此问题:把线程死锁就可以有效的避免,数据重复读取的问题了)
</code></pre><h3 id="然后-创建线程有哪些方式"><a href="#然后-创建线程有哪些方式" class="headerlink" title="然后,创建线程有哪些方式?"></a>然后,创建线程有哪些方式?</h3><ul>
<li>刚才也说了,一个进程至少有一个线程,当我们不做任何的处理的时候,就是单进程.<br>  而实现多线程<ul>
<li>要么继承Thread类,创建线程子类<br>重写run 方法,这个run方法的方法体就代表了线程要完成的任务,大部分javaee工程师,都喜欢叫这个方法体为,执行体<br>(然后调用对象的,start()方法,启动该线程)</li>
<li>要么就实现Runnable 接口创建线程类<br>一样的,重写run方法,<br>start启动<br>但是要注意:<br>创建Runnable实例类的实例,是作为Thread的target来创建Thread对象的,这个Thread才是线程的真正对象.</li>
</ul>
</li>
</ul>
<p>思维导图如下:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="enter description here" title="线程和进程的区别"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基本数据类型和引用数据类型的区别]]></title>
      <url>/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="引用数据和基本数据的区别"><a href="#引用数据和基本数据的区别" class="headerlink" title="引用数据和基本数据的区别"></a>引用数据和基本数据的区别</h3><pre><code>基本数据类型

Int,long,long,float,double,short,boolean,char,byte

引用数据类型:
        类,接口,数组,枚举,注解类型
</code></pre><p>区别</p>
<ul>
<li>从概念方法来说:<pre><code>基本数据类型:变量名指向具体的数值 ,引用数据类型:变量名指向存数据对象的内存地址,即变量名指向hash值
</code></pre></li>
<li><p>从内存方法</p>
<pre><code>基本数据类型在被创建时，在栈上给其划分一块内存，将数值直接存储在栈上。
</code></pre></li>
<li><p>引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址。</p>
<pre><code>数据类型在 栈和堆中的区别
</code></pre></li>
<li><p>静态区： 保存自动全局变量和 static 变量（包括 static 全局和局部变量）。静态区的内容在总个程序的生命周期内都存在，由编译器在编译的时候分配。</p>
</li>
<li><p>堆区：  一般由程序员分配释放，由 malloc 系列函数或 new 操作符分配的内存，其生命周期由 free 或 delete 决定。在没有释放之前一直存在，直到程序结束，由OS释放。其特点是使用灵活，空间比较大，但容易出错</p>
</li>
<li><p>栈区： 由编译器自动分配释放，保存局部变量，栈上的内容只在函数的范围内存在，当函数运行结束，这些内容也会自动被销毁，其特点是效率高，但空间大小有限</p>
</li>
</ul>
<p>思维导图如下:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="" title="引用数据和基本数据的区别"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ArrayList和LinkedList的区别]]></title>
      <url>/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="大致的区别"><a href="#大致的区别" class="headerlink" title="大致的区别:"></a>大致的区别:</h3><ul>
<li><p>ArrayList是实现了基于动态数组的数据结构, LinkedList基于链表的数据结构</p>
</li>
<li><p>对于随机访问get和set,ArrayList优于LinkedList,因为ArrayList可以随机定位,而LinkedList要移动指针一步一步的移动到节点处<br>(举例:因为ArrayList的底层是动态数组,它属于一个对象,而LinkedList是链表,它是跟很多对象有关联的,所以, 你查询的话,数组就很快了,相对Linked而言,它联系着很多的对象,查询的时候,你要把他们都查出来,这个时候从性能和时间上,linkedList就不如ArrayList!)</p>
</li>
<li><p>对于新增和删除操作add和remove，LinedList比较占优势，只需要对指针进行修改即可，而ArrayList要移动数据来填补被删除的对象的空间。<br>(ArrayList在添加和删除的时候,底层是创建一个新的数组,而LinkedList却只要修改一下指针就ok了)</p>
</li>
</ul>
<h3 id="什么时候用哪个"><a href="#什么时候用哪个" class="headerlink" title="什么时候用哪个?"></a>什么时候用哪个?</h3><p>首先ArrayList和linkedList 是两个集合类,用于存储一系列的对象引用</p>
<p>1.ArrayList的内部实现是基于基础的对象数组的，因此，它使用get方法访问列表中的任意一个元素时(random access)，它的速度要比LinkedList快</p>
<p>2.LinkedList中的get方法是按照顺序从列表的一端开始检查，直到另外一端。对LinkedList而言，访问列表中的某个指定元素没有更快的方法了。</p>
<p>3.当操作是在一列数据的后面添加数据而不是在前面或中间,并且需要随机地访问其中的元素时,使用ArrayList会提供比较好的性能；</p>
<p>4.当你的操作是在一列数据的前面或中间添加或删除数据,并且按照顺序访问其中的元素时,就应该使用LinkedList了。</p>
<h3 id="所以-简单的来说"><a href="#所以-简单的来说" class="headerlink" title="所以, 简单的来说"></a>所以, 简单的来说</h3><font color="red">业务如果查询多,就用ArrayList<br>业务添加或者删除的多 就用 linkedList</font>

<p>思维导图如下:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/ArrayList%E5%92%8CLinkedList%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[<猎场> 专场]]></title>
      <url>/%E7%8C%8E%E5%9C%BA-%E4%B8%93%E5%9C%BA/</url>
      <content type="html"><![CDATA[<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1511066034415.jpg" alt="l猎场"></p>
<p>最新的猎场可谓是火到爆炸啊!<br>可惜有些小伙伴们,想听得 “一场恋爱”需要付费!</p>
<p>今天就给小伙伴们分享一下,下载链接!<br>为了让遗憾不再是遗憾,为了,小伙伴们,更加激情的 追 &lt;&lt;猎场&gt;&gt;</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1511066230267.jpg" alt=""></p>
<hr>

<font color="red">一场念爱 《猎场》电视剧片尾曲</font><audio src="http://oyz8ujxtu.bkt.clouddn.com/%E6%9D%A8%E5%AE%97%E7%BA%AC%20-%20%E4%B8%80%E5%9C%BA%E6%81%8B%E7%88%B1.mp3" controls="controls"></audio><br><br><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1511066965446.jpg" alt=""><br><br>下载地址:<br><p><a href="http://oyz8ujxtu.bkt.clouddn.com/%E6%9D%A8%E5%AE%97%E7%BA%AC%20-%20%E4%B8%80%E5%9C%BA%E6%81%8B%E7%88%B1.mp3"" download="w3logo" target="_blank" rel="external">高级音质</a> 
<a href="http://oyz8ujxtu.bkt.clouddn.com/%E6%9D%A8%E5%AE%97%E7%BA%AC%20-%20%E4%B8%80%E5%9C%BA%E6%81%8B%E7%88%B1%20%5Bmqms2%5D.flac" download="W3logo" target="_blank" rel="external">无损音质</a>
</p>

<hr>

<font color="red">盛开 《猎场》电视剧片尾曲</font><audio src="http://oyz8ujxtu.bkt.clouddn.com/%E8%83%A1%E6%AD%8C%20-%20%E7%9B%9B%E5%BC%80.mp3" controls="controls"></audio>
<br>

<image src="http://oypem0qjb.bkt.clouddn.com/Stone/1511066939007.jpg">

下载地址:
<p><a href="http://oyz8ujxtu.bkt.clouddn.com/%E8%83%A1%E6%AD%8C%20-%20%E7%9B%9B%E5%BC%80.mp3"" download="w3logo" target="_blank" rel="external">高级音质</a><br><a href="http://oyz8ujxtu.bkt.clouddn.com/%E8%83%A1%E6%AD%8C%20-%20%E7%9B%9B%E5%BC%80%20%5Bmqms2%5D.flac" download="W3logo" target="_blank" rel="external">无损音质</a></p><br><br><br>  还有一个好听的音乐专辑哟!<br>  给小伙伴们分享一下:<br><br>  <img src="http://oypem0qjb.bkt.clouddn.com/Stone/1511067595728.jpg" alt=""><br><br>  Katy perry-Witness <audio src="http://oyz8ujxtu.bkt.clouddn.com/01%20-%20Witness.mp3" controls="controls"></audio><br> 整个Witness 专辑 会在后期更新!<br> 到时候,更新会发布在<br><br>最后,如果下载出现问题的小伙伴们,可以单独找我要!<br>我会在看到消息的第一时间发给你哦!<br><br><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1511067327802.jpg" alt=""><br><br>@Stone  <font color="red">QQ :993166015</font>


</image>]]></content>
      
        
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[装逼神器]]></title>
      <url>/%E8%A3%85%E9%80%BC%E7%A5%9E%E5%99%A8/</url>
      <content type="html"><![CDATA[<iframe src="http://www.riaway.com/zb/" width="100%" height="1020px" scrolling="no"></iframe>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[BOS技术整理-02]]></title>
      <url>/BOS%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86-02/</url>
      <content type="html"><![CDATA[<p>jquery easyui  总合 (直接看API文档 后期加上如何使用)<br>Oracle 数据库安装配置使用  </p>
<p>1 . 直接安装</p>
<p>3 . 打开服务 并尝试连接数据库</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510846959140.jpg" alt="" title=" "></p>
<p>4 . 安装远程连接工具</p>
<pre><code>PLSQLDeveloper 安装配置使用 
</code></pre><p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847009285.jpg" alt="" title=" "></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847041475.jpg" alt="" title=" "></p>
<p>2.在 PLSQL Developer 启动，配置 oracle instanceclient 目录  </p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847069189.jpg" alt="enter description here" title=" "></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847215970.jpg" alt="enter description here" title=" "></p>
<p>4、    默认 PLSQL Developer 连接 Oracle 使用客户端字符集 utf-8 ，<br>     基于工具使用 SQL 插入中文有乱码问题，设置客户端字符集 gb2312  </p>
<p>配置 环境变量<br>NLS_LANG = SIMPLIFIED CHINESE_CHINA.ZHS16GBK </p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847135679.jpg" alt="enter description here" title=" "></p>
<p>弹窗了,就表示成功了!</p>
<p>工具补充:</p>
<h2 id="Navicat-Premium-安装和使用"><a href="#Navicat-Premium-安装和使用" class="headerlink" title="Navicat  Premium 安装和使用"></a>Navicat  Premium 安装和使用</h2><h3 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h3><p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847235081.jpg" alt="enter description here" title=" "></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847250517.jpg" alt="enter description here" title=" "></p>
<h2 id="Orcale-创建用户"><a href="#Orcale-创建用户" class="headerlink" title="Orcale 创建用户"></a>Orcale 创建用户</h2><p>1 . 先进入 Orcale 命令行<br>2 .   针对 BOS 系统建立新的用户  </p>
<p>创建 bos/bos 账户， 授予角色 connect、resource<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-- Create the user  create   user BOS   identified by &quot;&quot;   default tablespace SYSTEM   temporary tablespace TEMP   profile DEFAULT   password expire; </div><div class="line"></div><div class="line"></div><div class="line">-- Grant/Revoke role privileges  grant connect to BOS; grant resource to BOS; -- Grant/Revoke system privileges  grant unlimited tablespace to BOS;</div></pre></td></tr></table></figure></p>
<h2 id="Spring-环境搭建"><a href="#Spring-环境搭建" class="headerlink" title="Spring 环境搭建"></a>Spring 环境搭建</h2><p>IOC 导入 context 依赖 beans、core、expression<br>AOP 导入<br> 测试集成<br>     Web 集成 配置监听器<br>整合持久层框架 hibernate、jpa<br>    web.xml 配置 spring 监听器</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847758200.jpg" alt="enter description here" title=" "></p>
<p>src/main/resource 下 建立 applicationContext.xml<br>rc/main/resource 提供 config.properties 外部属性文件、log4j.properties 日志配置文件<br>Spring Data JPA </p>
<p>代替了 Hibernate<br>“CURD “ 但是和Hibernate一样<br>实现DAO(数据)层的功能 “增删改查”<br>Hibernate 实体类 生成表结构 —- 领域（Domain）驱动建模</p>
<p>这次使用的是驱动建模,传统的设计模式是:<br>    先设计表,再创建实体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JPA 注解使用</div><div class="line">	@Entity 标明是实体类</div><div class="line">	@Table 映射表名称</div></pre></td></tr></table></figure></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847848085.jpg" alt="enter description here" title=" "><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Id 主键标识</div><div class="line">@GeneratedValue 自动生成主键的值</div><div class="line">@Column 设置映射数据表中列信息</div></pre></td></tr></table></figure></p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847930849.jpg" alt="enter description here" title=" "></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@Temporal 控制数据表保存日期哪个部分（日期、时间、日期时间）</div></pre></td></tr></table></figure>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847960057.jpg" alt="enter description here" title=" "></p>
<pre><code>@OneToMany(mappedBy 相当于 inverse )  @ManyToOne 结合 @JoinColumn 添加一列外键 
     ![enter description here][13]

    @ManyToMany 一方写 mappedBy 放弃外键维护、另一方 @JoinTable 维护中间表
</code></pre><p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510847970307.jpg" alt="enter description here" title=" "></p>
<p>思维导图:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/BOS%20%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86-02.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> Oracle安装 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BOS技术整合-01]]></title>
      <url>/BOS%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88-01/</url>
      <content type="html"><![CDATA[<ol>
<li>Git<br>1.1.    什么是Git<br>1.1.1.    Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目<br>1.2.    Git常用命令<br>1.2.1.    查看当前版本: git -version<br>1.2.2.    查看当前状态  git status<br>1.2.3.    提交文件  git commit -a<br>1.2.4.    合并到远程代码库（首先要将远程库，pull到本地，否则不能push）  git push 远程地址 master<br>1.2.5.    pull远程到本地   git pull 远程地址  master<br>1.2.6.    设置 git ignore 过滤文件，.class 后缀文件不提交到远程<br>$ echo <em>.class&gt;.gitignore<br>查看设置是否成功：<br>$ cat .gitignore
</em>.class<br>1.3.    Git图形化界面操作<br>1.3.1.    下载 TortoiseGit 图形化客户端安装<br>1.3.2.<br>1.3.3.<br>1.3.4.<br>1.3.5.    删除文件和文件对比操作</li>
</ol>
<p>1.4.    Git 的分布式版本控制特性：同一个仓库可以分布到不同的机器上<br>1.4.1.    1 要有一个原始版本库<br>1.4.2.    2 别的机器 可以 clone 原始版本库<br>1.5.    从本地仓库恢复<br>1.5.1.    </p>
<ol>
<li>jquery easyui<br>2.1.    介绍:<br>2.1.1.    jQuery EasyUI是一组基于jQuery的UI插件集合体，而jQuery EasyUI的目标就是帮助web开发者更轻松的打造出功能丰富并且美观的UI界面。开发者不需要编写复杂的javascript，也不需要对css样式有深入的了解，开发者需要了解的只有一些简单的html标签。<br>2.2.    使用:<br>2.2.1.    引入 easyUI<br>首先，你需要包含一些js和css文件：<br><link rel="stylesheet" type="text/css" href="../themes/default/easyui.css"><br><script type="text/javascript" src="../jquery-1.4.2.min.js"></script><br><script type="text/javascript" src="../jquery.easyui.min.js"></script><br>2.2.2.    使用小图标</li>
</ol>
<p>easyui预定义了一些图标css，这些css类可以显示图片背景（16×16）。使用这些类之前，需要包含：</p>
<p><link rel="stylesheet" type="text/css" href="../themes/icon.css"><br>2.2.3.    转换成Ajax表单</p>
<p>我们写一些jquery代码使表单以ajax方式发送。注意，当数据返回时，form插件的success函数激发，所以我们可以处理一点事情。<br>$(‘#ff’).form({<br>    success:function(data){<br>        $.messager.alert(‘Info’, data, ‘info’);<br>    }<br>});</p>
<ol>
<li>Hibernate<br>3.1.    介绍<br>3.1.1.    JPA(Java Persistence API)作为Java EE 5.0平台标准的ORM规范，将得到所有Java EE服务器的支持。JPA受到大家的一致好评。JPA作为ORM领域标准化整合者的目标应该不难实现。<br>3.2.    注意事项<br>3.2.1.<br>必须使用javax.persistence.Entity注解或者在    XML映射文件中有对应的元素<br>必须具有一个不带参的构造函数，类、方法和    需要持久化的属性不能声明为final；<br>如果游离状的实体对象需要以值的方式进行传    递，如通Session bean的远程业务接口传    递，则必须实现Serializable接口；<br>需要持久化的属性，其访问修饰符不能是    public，它们必须通过实体类方法进行访问。<br>3.3.    注解<br>3.3.1.    @Entity<br>将实体对象标注为一个实体，表示需要保存到数据库中，默认情况下类名即为表名，通过name属性显式指定表名，如处的name = “student”，表示Student保存到student表中。<br>3.3.2.    @Id</li>
</ol>
<p>对应的属性是表的主键。<br>3.3.3.    @GeneratedValue<br>主键生成策略<br>3.3.4.    @Column(name = “address”)<br>属性对应的表字段<br>3.4.    主要的API<br>3.4.1.    EntityManager<br>实体对象由实体管理器进行管理，JPA使用javax.persistence.EntityManager代表实体管理器<br>主要的方法<br>EntityManager的主要方法</p>
<pre><code>void persist(Object entity)
void remove(Object entity)
T merge(T entity) 
T find(Class entityClass, Object primaryKey)
</code></pre><p>3.4.2.    Query<br>JPA使用Query接口代表一个查询实例。该接口拥有众多执行数据查询的接口方法。</p>
<p>◆Object getSingleResult()：<br>◆List getResultList()：<br>◆int executeUpdate()：<br>3.4.3.    查询语句</p>
<p>JPQL(Java Persistence Query Language)</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/BOS%20%E6%8A%80%E6%9C%AF%E6%95%B4%E5%90%88-01.jpg" alt="enter description here" title="技术整合-01"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring整合SSH]]></title>
      <url>/Spring%E6%95%B4%E5%90%88SSH/</url>
      <content type="html"><![CDATA[<p>SSH整合-XML</p>
<p>准备工作-导包（复制）<br>标记: 优先级 1</p>
<p>SSh( struts &amp; hibernate&amp;Spring 的核心配置文件)</p>
<p>Spring的 </p>
<p>applicationContext.xml  核心配置文件</p>
<p>Struts 的</p>
<p>Struts.xml 核心配置文件</p>
<p>Hibernate的</p>
<p>Hibernate.cfg.xml核心配置</p>
<p>类的映射配置文件 XXX.hbm.xml</p>
<p>Web.XML 中配置 所有框架的入口<br>标记: 优先级 2</p>
<p>Struts的入口</p>
<p>在web.xml中配置的 (Struts过滤器)</p>
<p> 过滤器对象是 由Struts提供的 <em>“ StrutsPrepareAndExcuteFilter  “</em><br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Hibernate的入口</p>
<p>因为它是底层实现,所以不需要在web.xml中配置,最多也是交给Spring来托管</p>
<p>Spring的入口</p>
<p>在web.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">&lt;!-- 配置Spring上下文监听器 --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </div><div class="line">  	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </div><div class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 配置Spring配置文件的路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>思维导图如下:</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/SSH%E6%95%B4%E5%90%88-XML.jpg" alt="enter description here" title="SSH整合-XML"></p>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[欢迎--Stone]]></title>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<p>终于完成博客的搭建了! 内心还是比较激动的!做个日记!</p>
<h1 id="博客的第一天"><a href="#博客的第一天" class="headerlink" title="博客的第一天"></a>博客的第一天</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=513357140&auto=1&height=66"></iframe>

<h3 id="Github-搭建成功"><a href="#Github-搭建成功" class="headerlink" title="Github 搭建成功!"></a>Github 搭建成功!</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 欢迎来到Stone的个人博客</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[windowns 端口查询]]></title>
      <url>/windowns-%E7%AB%AF%E5%8F%A3%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<p>//查看端口号<br>    查看所有的端口占用情况</p>
<pre><code>netstat -ano
</code></pre><ol>
<li>开始—-&gt;运行—-&gt;cmd，或者是window+R组合键，调出命令窗口</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499275992.jpg" alt=""></p>
<ol>
<li>输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是49157，首先找到它。</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499300076.jpg" alt=""></p>
<ol>
<li>查看被占用端口对应的PID，输入命令：netstat -aon|findstr “49157”，回车，记下最后一位数字，即PID,这里是2720</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499307652.jpg" alt=""></p>
<ol>
<li>继续输入tasklist|findstr “2720”，回车，查看是哪个进程或者程序占用了2720端口，结果是：svchost.exe</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499315326.jpg" alt=""></p>
<ol>
<li>或者是我们打开任务管理器，切换到进程选项卡，在PID一列查看2720对应的进程是谁，如果看不到PID这一列,如下图：</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499322228.jpg" alt=""></p>
<ol>
<li>则我们点击查看—&gt;选择列，将PID(进程标示符)前面的勾打上，点击确定。</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499330395.jpg" alt=""></p>
<ol>
<li>这样我们就看到了PID这一列标识，看一下2720对应的进程是谁，如果没有，我们把下面的显示所有用户的进程前面的勾打上，就可以看到了，映像名称是svchost.exe，描述是，Windows的主进程,与上面命令查看的完全一致。</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499335975.jpg" alt=""></p>
<ol>
<li>结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im Tencentdl.exe。</li>
</ol>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499344143.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> windows技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql-05]]></title>
      <url>/mysql-05/</url>
      <content type="html"><![CDATA[<h1 id="mysql的外键和视图"><a href="#mysql的外键和视图" class="headerlink" title="mysql的外键和视图"></a>mysql的外键和视图</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line">	--  外键（新增）</div><div class="line">	</div><div class="line">	--创建表的时候增加外接：在所有的表字段之后使用 </div><div class="line">	-- foreign key （外键字段）</div><div class="line">	-- references  （主键字段）</div><div class="line"></div><div class="line">	在新增表之后 修改表结构</div><div class="line">		alter table 表名 add[constraint] foreign key（外键字段） references(主表 主键字段);</div><div class="line"></div><div class="line">	-- 删除外键</div><div class="line">		alter table 表名 drop foreign key 外键名;</div><div class="line">		</div><div class="line">		-- desc 表名</div><div class="line">		-- show create table 表名</div><div class="line">		</div><div class="line"></div><div class="line">	-- 外键（默认约束）</div><div class="line">	--默认的有倆点：一个对父表，一个对子表</div><div class="line"></div><div class="line">	对子表约束：如果对应的外键字段在父表找不到对应的匹配：那么操作会失败。</div><div class="line">	</div><div class="line">	对父表约束：父表数据进行写操作（删和改：都必须涉及到主键本身）</div><div class="line">	</div><div class="line">	</div><div class="line">	-- 外键 条件</div><div class="line">	1.外键要存在：首先必须保证表的存储引擎是innodb。</div><div class="line">	如果不是innodb，能成功但是没有约束效果！</div><div class="line">	2. 外键字段的字段类型（列类型）必须与父表的主键类型完全一致</div><div class="line">	3.一张表的外接名字不能重复</div><div class="line">	4.增加外键的字段（数据已经存在），必须保证数据与附表主键要求对应</div><div class="line">	</div><div class="line">---- 外键约束 外键的作用！</div><div class="line"></div><div class="line">	外键约束有三种约束模式：都是对父表的约束</div><div class="line">	district ：严格模式（默认的人）父表不能删除或者更新一个已经被子表数据的引用的记录</div><div class="line">	cascade  ： 级联模式 对应子表关联的数据也跟着呗删除</div><div class="line">	setnull  ：置空模式 对应的数据（外键字段）被置空</div><div class="line">	</div><div class="line">	foreign key（外键字段）references 父表（主键字段） on delete 模式 update 模式;</div><div class="line"></div><div class="line"></div><div class="line">------- 联合查询</div><div class="line">	将多次查询（多条 select 语句），在记录上进行拼接（字段不会增加）</div><div class="line"></div><div class="line">	--【基本语法】：</div><div class="line">		多条select 语句结构：每一条select 语句获取的字节数必须严格一致</div><div class="line">		</div><div class="line">		select 语句1</div><div class="line">		union[union 选项]</div><div class="line">		select 语句2...</div><div class="line">		</div><div class="line">		union 选项：</div><div class="line">			All：保留所有（不管重复）</div><div class="line">			Distinct：去重(整个重复) 默认的；</div><div class="line">	</div><div class="line">	意义：</div><div class="line">	1.查询一张表,但是需求不同：</div><div class="line">	2.多张表的结果完全一样的，保存的数据（结构）也一样的。</div><div class="line">	</div><div class="line"></div><div class="line">	-- 联合查询 order by 的使用</div><div class="line">		在联合查询中：order by 不能直接使用,需要对查询使用括号才行！</div><div class="line">		</div><div class="line">		让order by生效 需要加 limit</div><div class="line">		(select 语句1 sex order  limit 99999)</div><div class="line">		union</div><div class="line">		(select 语句2 sex order by sex desc limt 999999 );</div><div class="line">	</div><div class="line">	-- 子查询</div><div class="line">	 sub query</div><div class="line">	 一条select邮件内部包含了另外一条select语句</div><div class="line">	  两种分类繁琐：按位置分类 ；安结果没类；</div><div class="line">	  </div><div class="line">			From子查询： 跟在from 之后</div><div class="line">			where子查询： 出现在wehre 条件中</div><div class="line">			Exists：	在exists里面</div><div class="line">			</div><div class="line">			按结果：</div><div class="line">			标量子查询：得到的结果是一行一列</div><div class="line">			列子查询：一行多列</div><div class="line">			行：	多列一行（多行多列）</div><div class="line">				上面几个出现的位置都是在where之后</div><div class="line">			表：	多行多列（出现的位置在from之后）</div><div class="line">			</div><div class="line">	--表量子查询</div><div class="line">	1.确定数据：获取所有的学生</div><div class="line">	select * from 学生表名 wheere</div><div class="line">	</div><div class="line">	2.获取班级id：</div><div class="line">	select id from 班级表 where 字段名=班级;</div><div class="line">	</div><div class="line">	select * from 表名 where id=any(select id from 表名);</div><div class="line">	select * from 表名 where id=some(select id from 表名);</div><div class="line">	select * from 表名 where id=all(select id from 表名);</div><div class="line"></div><div class="line">	--行子查询</div><div class="line">	返回的结果可以是多行多列（一行多列）</div><div class="line">	1.确定数据源</div><div class="line">	select * from 表名 where 条件？</div><div class="line">	2.最大年龄和最高身高！</div><div class="line">	select max(age),max(height) from 表名;</div><div class="line">	-- mystudent 学生表</div><div class="line">	select * from mystudent where </div><div class="line">	--行元素(age,height)</div><div class="line">	(age,height)=(select max(age),max(height) from 学生表);</div><div class="line"></div><div class="line">	--表子查询</div><div class="line">		返回的结果是多行多列的二维表：子查询的结果可以当做二维表来使用！</div><div class="line">		</div><div class="line">		需求：找出每个班最高的一个学生</div><div class="line">		1.确定数据源：先将学生按身高进行降序！</div><div class="line">		</div><div class="line">		2.每个班选出第一个学生</div><div class="line">		select * from mystudent group by cid</div><div class="line">		</div><div class="line">		Select * from (select * from mystudent order by heigfht desc )&apos;身高&apos;group by  cid;</div><div class="line">	</div><div class="line">	</div><div class="line">	--EXISTS 查询</div><div class="line">	--	所有的查询都需要先找到 数据源！；</div><div class="line">		</div><div class="line">		Exists： 是否存在的意思，exists 子查询就是用来判断某些条件是否满足；</div><div class="line">		</div><div class="line">		--	select exists（select * from 存在的表）;</div><div class="line">		--	返回 1;</div><div class="line">		</div><div class="line">		select * from mystudent where </div><div class="line">		exists(select * from myclass)</div><div class="line">		</div><div class="line">	</div><div class="line">	-- 视图（创建）</div><div class="line">		view ：有结构但是没结果的虚拟表！</div><div class="line">	</div><div class="line">		基本语法：</div><div class="line">		create view 视图名字 as select语句;-- 可以是普通查询；</div><div class="line">		</div><div class="line">		创建单表视图：基表</div><div class="line">		create view 视图名字 as select * from 表名;</div><div class="line">		</div><div class="line">		创建多表视图：</div><div class="line">		create view 视图表名 as</div><div class="line">		select *（注意这里不能有重复的字段名出现） from</div><div class="line">		表名 as inner join 表名</div><div class="line">		on 相同条件！！</div><div class="line">		</div><div class="line">	-- 视图查看  --- 的结构</div><div class="line">		</div><div class="line">		--表的所有查看方式都适用	</div><div class="line">			view 查看表</div><div class="line">			</div><div class="line">		show create view 结构表名\G;</div><div class="line">		</div><div class="line">		--视图一旦创建：系统会在视图对应的数据库文件夹下创建一个对应的结构文件:  fm 文件</div><div class="line">	</div><div class="line">		</div><div class="line">		-- 修改视图</div><div class="line">		</div><div class="line">		alter view 视图名字 as 新的 select语句</div><div class="line">		-- 删除视图</div><div class="line">		</div><div class="line">		Drop view 视图名字;</div><div class="line">		</div><div class="line">		-- 视图操作（新增）</div><div class="line">		视图数据操作：</div><div class="line">		</div><div class="line">		--多表视图不能删除数据</div><div class="line">		-- 单表视图可以删除</div><div class="line">		delete from 视图名 where 条件;</div><div class="line">		</div><div class="line">		-- 视图更新 </div><div class="line">		--第5天 25</div><div class="line">		？？？？？？？？？？？？</div><div class="line">		</div><div class="line">		-- 算法</div><div class="line">		undefined：未定义（默认的）</div><div class="line">		Temptable：零时表 先执行视图的select 语句；</div><div class="line">		merge：合并算法！</div><div class="line"></div><div class="line">25------------- 没学...</div></pre></td></tr></table></figure>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499132228.jpg" alt="oneNate笔记"></p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql-04]]></title>
      <url>/mysql-04/</url>
      <content type="html"><![CDATA[<h1 id="多表-amp-连接查询"><a href="#多表-amp-连接查询" class="headerlink" title="多表&amp;连接查询"></a>多表&amp;连接查询</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">-------------- 连接查询</div><div class="line"></div><div class="line">SQL 中 将连接查询分成了四类</div><div class="line">	内连接</div><div class="line">	外连接</div><div class="line">	自然连接</div><div class="line">	交叉连接</div><div class="line">	</div><div class="line">/*</div><div class="line">	连接查询：join </div><div class="line">	左表	： 左表 join</div><div class="line">	右表	：  join 右表</div><div class="line">*/</div><div class="line">	</div><div class="line">-- 交叉链接</div><div class="line">	cross join </div><div class="line">	</div><div class="line">	基本语法：左表 cross join 右表; ===== from 左表，右表;</div><div class="line">	</div><div class="line">	</div><div class="line">-- 内连接</div><div class="line">	左表[inner] join 右表 on 左表.字段=右表.字段</div><div class="line">	</div><div class="line">	on 表示连接条件</div><div class="line">	</div><div class="line">	select * from 表 as a</div><div class="line">	inner join 表 as s</div><div class="line">	on a.id=s.id;</div><div class="line">	</div><div class="line">	内链接没有on 条件  又成了 笛卡尔积！</div><div class="line"></div><div class="line">	内连接可以用 where 代替 on （where 没有 on 效率高）</div><div class="line">	</div><div class="line">	</div><div class="line">-- 外链接</div><div class="line">	</div><div class="line">	outer join 以某张表为主</div><div class="line">	</div><div class="line">	left join 左外链接 左连接</div><div class="line">	right join 右外链接	右连接</div><div class="line">	</div><div class="line">	基本语法：</div><div class="line">		左表 left / right join 右表 </div><div class="line"></div><div class="line"></div><div class="line">-- 自动连接</div><div class="line">	natural join</div><div class="line">	自动匹配连接条件：</div><div class="line">		系统以字段名字作为匹配模式（同名字段就作为条件，多个同名，多个条件）</div><div class="line">		</div><div class="line">		改名字：</div><div class="line">			alter table 表名 change 字段名 新字段名 类型（varchar） not null；</div><div class="line">		</div><div class="line">		自动使用同名作为字段连接条件。</div><div class="line">		</div><div class="line">		自然外链接   </div><div class="line">			select * from 表 natural left join 表;</div><div class="line">	</div><div class="line">		</div><div class="line">		左表left/right/inner join  右表 using(字段名);-- 使用同字段作为连接条件 自动合并条件</div></pre></td></tr></table></figure>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510499048222.jpg" alt="oneNate笔记"></p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql-03]]></title>
      <url>/mysql-03/</url>
      <content type="html"><![CDATA[<h1 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div></pre></td><td class="code"><pre><div class="line">	----- 字段属性：</div><div class="line">	主键：primary key 主键 唯一约束；不能重复</div><div class="line">		</div><div class="line">		在创建表的时候，在后面加 primary key 关键字</div><div class="line">		</div><div class="line">	-- 追加主键</div><div class="line">		alter table 表名 modify 字段名 primary key</div><div class="line">		alter table 表名 add primary key(字段名);</div><div class="line"></div><div class="line">	--更新&amp;删除主键</div><div class="line">		</div><div class="line">		alter table 表名 drop primary key;</div><div class="line"></div><div class="line"></div><div class="line">	--主键分类</div><div class="line">	id int primary key comment &apos;逻辑主键&apos;</div><div class="line">	</div><div class="line">	</div><div class="line">------ 自动增长</div><div class="line">	不给值或者给NULL的时候，会自动被系统+1操作</div><div class="line">	</div><div class="line">	--自增长通常跟主键搭配</div><div class="line">	</div><div class="line">	auto_increment</div><div class="line">	1.任何一个字段要做自增长前提是本身是一个索引(Key 拦有值)</div><div class="line">	2.必须是int型</div><div class="line">	3.一张表只能有一个自增长</div><div class="line">	</div><div class="line">	default NUll 不给值 都会触动自增长</div><div class="line">	</div><div class="line">	</div><div class="line">----列属性（修改自增长）</div><div class="line">	向下修改不生效</div><div class="line">	向上修改生效</div><div class="line">	</div><div class="line">	alter table 表名 auto_increment = 值;</div><div class="line">	</div><div class="line">	</div><div class="line">	查看字增长变量</div><div class="line">	show variables like &apos;auto_increment%&apos;;</div><div class="line">	-- 修改自增长步长</div><div class="line">	set auto_increment_increment=5;--一次自增5</div><div class="line"></div><div class="line">-- 删除自增长</div><div class="line">	字段的一个属性，可以通过 modify 进行修改（没有 auto_increment）</div><div class="line">	Alter table 表名 modify 字段 类型;</div><div class="line">	</div><div class="line">	alter table 表 modify id int;</div><div class="line">	</div><div class="line">	--查看 desc 表名</div><div class="line">	</div><div class="line"></div><div class="line">-- 列属性（唯一键） </div><div class="line">	unique key  --唯一键 </div><div class="line">	数据不能重复,可以有多个唯一，允许为空。</div><div class="line">	</div><div class="line">	本质与主键差不多。</div><div class="line">	</div><div class="line">	</div><div class="line">-- 增加唯一键</div><div class="line">	1.在创建表的时候，字段之后跟 unique / unique key;</div><div class="line">	</div><div class="line">	2.在所有的字段之后。unique key(字段，字段);</div><div class="line">		not null unique key --PRI 表中又没有主键</div><div class="line">		</div><div class="line">	3.在创建表之后增加唯一</div><div class="line">		</div><div class="line">		alter table 表名 add unique key (字段);</div><div class="line">		</div><div class="line">	</div><div class="line"></div><div class="line">--- 删除唯一键</div><div class="line">	先删除后新增</div><div class="line">	</div><div class="line">	alter table 表名 drop unique key -- 错误的</div><div class="line">	</div><div class="line">	alter table 表名 dropindex 索引名字;</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line">--------索引</div><div class="line"></div><div class="line">	几乎所有的索引都是建立在字段之上</div><div class="line">	</div><div class="line">	根据某种算法，将已有得数据（未来可能新增的数据）</div><div class="line">	</div><div class="line">	</div><div class="line">	--索引的意义</div><div class="line">		1.提示查询数据的效率</div><div class="line">		2.约束数据的有效性（唯一性等）</div><div class="line">		</div><div class="line"></div><div class="line">		Mysql中提供了多种索引</div><div class="line">		</div><div class="line">		主键:primary key</div><div class="line">		唯一: unique key</div><div class="line">		全文: fulltext index</div><div class="line">		普通: index</div><div class="line">		</div><div class="line">		全文索引，最大的问题是如何确定关键字</div><div class="line">			英文很容易：单词与单词之间有空格</div><div class="line">			中文很难：没有空格，中文可以各种随意组合(分词：sphinx)</div><div class="line">			</div><div class="line">			</div><div class="line">	</div><div class="line">	</div><div class="line">---------------- 关系</div><div class="line">	一对一</div><div class="line">	一对多(多对一)</div><div class="line">	多对多</div><div class="line">	</div><div class="line">	sqlserver 主表 外表</div><div class="line">	</div><div class="line">	</div><div class="line">	---- 范式：减少数据冗余</div><div class="line">	</div><div class="line">	1NF - 6NF</div><div class="line">	</div><div class="line">	</div><div class="line">------- 1NF</div><div class="line">		第一范式：在设计表存储数据的时候，如果表中设计的字段存储的数据，在取出来使用之前</div><div class="line">		还血药额外的处理，不满足第一范式。</div><div class="line">		</div><div class="line">		数据不需要再次拆封</div><div class="line">	</div><div class="line">	-- 2NF</div><div class="line">		/*</div><div class="line">		不允许出现部分依赖</div><div class="line">		在输出舍得的过程中，如果有复合主键</div><div class="line">		且表中又字段并不是由整个主键来确定，</div><div class="line">		而是依赖主键中的某个字段，存在字段依赖的部分问题</div><div class="line">		称之为：部分依赖</div><div class="line">		*/</div><div class="line">	</div><div class="line">	-- 3NF</div><div class="line">	不能出现传递依赖</div><div class="line">	</div><div class="line">	--逆规范化</div><div class="line">	磁盘利用率与效率的对抗</div><div class="line">	就是增大空间，提高效率</div><div class="line">	</div><div class="line"></div><div class="line">	</div><div class="line">	</div><div class="line">-------------数据高级操作---------------------	</div><div class="line">	</div><div class="line">	数据操作：增删改查</div><div class="line">	</div><div class="line">	新增：</div><div class="line">	insert into 表名【字段名】 values (值列表);</div><div class="line">	</div><div class="line">	在数据插入的时候，假设主键对应的值已经存在，插入一定会失败！</div><div class="line">	</div><div class="line">	-- 主键冲突</div><div class="line">		更新操作</div><div class="line">		insert into 表名【字段名】values(值列表) on dupllcate key update 字段=值;</div><div class="line">		</div><div class="line">	  替换</div><div class="line">		replace into 表名【字段名】values（值列表;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">-------蠕虫复制</div><div class="line">		</div><div class="line">		复制创建表（表结构）</div><div class="line">		</div><div class="line">		create table 新表名 like 旧表名; </div><div class="line">		</div><div class="line">		蠕虫复制：先查出数据，然后将查出的数据新增一遍</div><div class="line">		</div><div class="line">		insert into 表名【字段列表】 select 字段列表 * from 数据表名（旧表）</div><div class="line">		</div><div class="line">		-- 蠕虫复制 成倍增长</div><div class="line">		insert into 自己 select * from 自己;</div><div class="line">		</div><div class="line">		</div><div class="line">		意义：</div><div class="line">			1.从已有表拷贝数据到新表中</div><div class="line">			2.可以迅速的让表中的数据膨胀到一定的数量级。测试表的压力已经效率</div><div class="line">		</div><div class="line">---- 高级 更新数据</div><div class="line"></div><div class="line">		基本语法</div><div class="line">		update 表名 set 字段=值 |where 条件|</div><div class="line">		</div><div class="line">		高级更新</div><div class="line">		update 表名 set 字段 =值 |where 条件| limit 更新数量|</div><div class="line">		</div><div class="line">			-- 把表中的 a 变成 c</div><div class="line">			update 表 set 字段=&apos;c&apos; where 字段=&apos;a&apos; limit 3;</div><div class="line">			</div><div class="line">			!!!GBK 不区分大小写。</div><div class="line">	</div><div class="line">---- 高级 删除数据 可以 通过 limit 来限制数量</div><div class="line"></div><div class="line">	delete from 表名【where 条件】【limit 数量】;</div><div class="line">	 </div><div class="line">	删除数据以后，自增长</div><div class="line">	</div><div class="line">	思路:数据的删除是不会该表表结构，只能删除表后重建。</div><div class="line">	</div><div class="line">	TRUNCATE 表名  -删除后，重置自增长</div><div class="line">	</div><div class="line">	</div><div class="line">------- 高级 数据查询（select 选项）</div><div class="line"></div><div class="line">	基本语法：</div><div class="line">	select 字段列表 * from 表名 where 条件|</div><div class="line">	</div><div class="line">	完整语法：</div><div class="line">	select 字段列表 * from 数据源 where 条件 group by </div><div class="line">	having  order  by limit;</div><div class="line">	</div><div class="line">		All:默认的，保留所有的结果</div><div class="line">		Distinct : 去重，将重复的去掉</div><div class="line">	</div><div class="line">	</div><div class="line">	-- 字段别名</div><div class="line">		</div><div class="line">		字段名 [as] 别名;</div><div class="line">		</div><div class="line">		不写 as 也行</div><div class="line">		</div><div class="line">	--- 数据源</div><div class="line">	/*	从一张表中取出一条记录，去另外一张表中匹配所有的记录</div><div class="line">		而且保留  记录数和字段数</div><div class="line">		这种结果为：笛卡尔积（交叉连接）</div><div class="line">		没什么用，尽量不用</div><div class="line"></div><div class="line">	*/	</div><div class="line">	</div><div class="line">	子查询：</div><div class="line">	</div><div class="line">	select * from （select * from 表名）;</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">-- 高级 where 子句</div><div class="line"></div><div class="line">		where 子句的目标用来判断数据，筛选数据</div><div class="line">		</div><div class="line">		where 返回结果 0 或者 1   0 带表false 1带表true ;</div><div class="line">		</div><div class="line">	</div><div class="line">	运算符：</div><div class="line">			&gt;	大于</div><div class="line">			&lt;	小于</div><div class="line">			&gt;= 	大于等于</div><div class="line">			&lt;=	小于等于</div><div class="line">			!=  &lt;&gt;	不等于</div><div class="line">			=	等于</div><div class="line">			模糊查询里用到的：</div><div class="line">			like</div><div class="line">			between  and</div><div class="line">			in / not in</div><div class="line">			</div><div class="line">	逻辑运算符：</div><div class="line">			&amp;&amp;(and)  并</div><div class="line">			||(or)	或者</div><div class="line">			!(not)	非</div><div class="line">	</div><div class="line">	rand 取得一个0和1之间的随机数</div><div class="line">	floor 向下取整！</div><div class="line">	1.</div><div class="line">		select * from 表 where id=1 || id=3 || id=5;</div><div class="line">						||</div><div class="line">						||</div><div class="line">		select * from 表 where id in(1,3,5);</div><div class="line">		</div><div class="line">	2.</div><div class="line">		select * from 表 where height&gt;=170 and heihgt&lt;=180;</div><div class="line">						||</div><div class="line">						||</div><div class="line">		select * from 表 where height between 170 and 180;				</div><div class="line">	</div><div class="line"></div><div class="line">--------------- Group by  分组----------------</div><div class="line">	聚合函数：</div><div class="line">	COUNT() :统计分组后的记录数，每一组有多少条记录</div><div class="line">	Max()	:统计每组中最大的值</div><div class="line">	Min()   :统计最小值</div><div class="line">	AVG() 	:统计平均值</div><div class="line">	SUM() 	: 统计和</div><div class="line">	</div><div class="line">	</div><div class="line">select 	聚合函数,字段名 from 表名 group by 字段名</div><div class="line"></div><div class="line">多字段排序：</div><div class="line">	--order by  放在语句最后</div><div class="line">select * from 表名 border by 字段名(desc/asc),</div><div class="line"></div><div class="line">	group_concat(字段)</div><div class="line">	</div><div class="line">	回溯统计：with rollup</div><div class="line">	</div><div class="line">	</div><div class="line">-- 	Having 子句</div><div class="line">	</div><div class="line">	Having 字句 进行条件判断</div><div class="line">	 </div><div class="line">	having 能做 where 能做的几乎所有事情 但是where却不能</div><div class="line">	</div><div class="line">	select 字段名 from 表名 group by 字段  having 条件</div><div class="line">	</div><div class="line">--- order by 	</div><div class="line">	</div><div class="line">	select * from 表名 order by 字段 desc/asc;</div><div class="line">	</div><div class="line">	</div><div class="line">--  limit 子句</div><div class="line">	limit 有两种使用方式。</div><div class="line">		只用来限制长度</div><div class="line">	</div><div class="line">	</div><div class="line">	------</div><div class="line">	length：每页显示的数量</div><div class="line">	Offset：offset-(页码-1)*每页显示数量</div></pre></td></tr></table></figure>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510498981617.jpg" alt="oneNate笔记"></p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql-02]]></title>
      <url>/mysql-02/</url>
      <content type="html"><![CDATA[<h1 id="mysql-数据类型-乱码处理"><a href="#mysql-数据类型-乱码处理" class="headerlink" title="mysql 数据类型,乱码处理"></a>mysql 数据类型,乱码处理</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">	----数据类型（列类型）</div><div class="line">	整数型和小数型</div><div class="line">	</div><div class="line"></div><div class="line">	--整数型</div><div class="line">	五类：</div><div class="line">	tinyint --迷你型 最多为256种 (常用)</div><div class="line">	smallint --小整型 最多65536种 2个字节</div><div class="line">	mediumint --中整型 使用3个字节数存储</div><div class="line">	int       --标准整形，使用4个字节存储 (常用)</div><div class="line">	bigint    --大整型   使用8个字节</div><div class="line">		</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">-------- 小数型   会四舍五入</div><div class="line">		</div><div class="line">	浮动型：小数点浮动，精度有限，会丢失精度</div><div class="line">	定定型：小数点固定，精度固定，不会丢失精度</div><div class="line">	</div><div class="line"></div><div class="line">-------- 浮点型	</div><div class="line">	float 	4  </div><div class="line">	double  8</div><div class="line"></div><div class="line"></div><div class="line">------ 定点型   不会四舍五入</div><div class="line">	查看警告：show warnings;</div><div class="line">	</div><div class="line"></div><div class="line">-------- 时间日期类型</div><div class="line">	datetime:时间日期</div><div class="line">	date : 日期</div><div class="line">	time ：时间（段）</div><div class="line">	timestamp ： 时间戳</div><div class="line">	</div><div class="line"></div><div class="line">-------------字符串类型----UTF8 一个字符占3个字节--------------</div><div class="line">在SQL 中，将字符串类型分了6类：</div><div class="line">	char , varchar,text,blob,enum,set</div><div class="line">	</div><div class="line">	--定长字符串</div><div class="line">		char 在定义结构的时候就已经定义了最终数据的存储长度</div><div class="line">		</div><div class="line">		char(L)L代表length、可以存储的长度、单位为字符，最大长度值为255.</div><div class="line">		</div><div class="line">	--变长字符串</div><div class="line">	varchar 在分配空间的时候，按最大的空间分配，但是实际上最终用了多少，是是根据具体的数据来确定</div><div class="line">	</div><div class="line">	Varchar(L) 理论长度是65536个字符</div><div class="line">	</div><div class="line">	--文本字符串</div><div class="line">	如果数据量非常大，通常说超过255个字符就会使用文本字符串</div><div class="line">		存储数据的格式进行分类：text和blob</div><div class="line">			text 存储文字</div><div class="line">			blob 存储二进制数据(通常不用)</div><div class="line"></div><div class="line"></div><div class="line">			</div><div class="line">------	枚举字符串---------------</div><div class="line">	枚举：enum 事先将所有可能出现的结果设计好</div><div class="line">	</div><div class="line">	使用方式：</div><div class="line">		定义：enum(可能出现的元素列表);</div><div class="line">	</div><div class="line">	--证明字段存储的数据是数值：将2数据取出来+0就可以判断出原来的数据存的到底是字符串还是数值，</div><div class="line"></div><div class="line">	</div><div class="line">	</div><div class="line">------------集合字符串</div><div class="line">	集合跟枚举类似：实际存储的是数值，而不是字符串（集合是多选的）、</div><div class="line">	</div><div class="line">	在集合里面，所有的字符串都对应二进制</div><div class="line">	</div><div class="line">	查询    select 列名+0,列名 from 表名</div><div class="line">	</div><div class="line">	对应的位，位取反</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line">	</div><div class="line">----------------Mysql记录长度------------</div><div class="line"></div><div class="line">Mysql中规定：任何一条记录最长不能超过65535个字节(varchar永远达不到理论值)</div><div class="line"></div><div class="line">	uft8 下 varchar实际顶配：21884字节</div><div class="line">	GBK	 下 varchar实际顶配：32766字节</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">--------------空属性</div><div class="line">	两个值：NULL（默认的）和 NOT NULL(不为空)</div><div class="line">	</div><div class="line">	虽然是默认的。数据库基本都是字段为空。</div><div class="line">	空数据没有意义</div><div class="line">	</div><div class="line">	create table myclass(</div><div class="line">		name varchar(20) not null,</div><div class="line">		room varchar(20) null</div><div class="line">	)charset utf8;</div><div class="line">	</div><div class="line">	</div><div class="line">-------------------列描述</div><div class="line">		comment  描述   没有时间含义：是专门用来描述字段，会根据表创建语句保存；</div><div class="line">			</div><div class="line">			</div><div class="line">			create table myclass(</div><div class="line">				name varchar(20) not null comment &apos;姓名&apos;,</div><div class="line">				money decimal(10,2) null comment &apos;钱&apos;</div><div class="line">			)charset utf8;</div><div class="line">	</div><div class="line">	</div><div class="line">---------------默认值</div><div class="line">	某一种数据会经常性的出现某个具体的值</div><div class="line">		</div><div class="line">		show create table 表名 查看列描述</div><div class="line">		</div><div class="line">		default 默认值 </div><div class="line">		</div><div class="line">		create table myclass(</div><div class="line">				name varchar(20) not null comment &apos;姓名&apos; default &apos;男&apos;,</div><div class="line">				money decimal(10,2) null comment &apos;钱&apos; default 0</div><div class="line">			)charset utf8;</div></pre></td></tr></table></figure>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510498892635.jpg" alt="oneNate笔记"></p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql-01]]></title>
      <url>/mysql-01/</url>
      <content type="html"><![CDATA[<h1 id="认识mysql数据库"><a href="#认识mysql数据库" class="headerlink" title="认识mysql数据库"></a>认识mysql数据库</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div></pre></td><td class="code"><pre><div class="line">数据库基础：</div><div class="line">1.什么是数据库？</div><div class="line">	 数据库：database 存储数据的仓库</div><div class="line"></div><div class="line">		数据库：高效的存储和处理数据的介质</div><div class="line"></div><div class="line"></div><div class="line">	2.数据库的分类</div><div class="line">分为两种：  关系型数据库（SQL）</div><div class="line">			非关系型数据库（NOSQL：not only SQL）</div><div class="line">		</div><div class="line"></div><div class="line">3.不同的数据库阵营中的产品？</div><div class="line">关系型的数据库	</div><div class="line">	大型：oracle DB2</div><div class="line">	中型：SQL-SERVER，MYsql</div><div class="line">	小型：access 等</div><div class="line">非关系型数据库：memcached，mongodb，redis</div><div class="line"></div><div class="line">4.区别？</div><div class="line">	关系型数据库：安全（保存磁盘，基本不可能丢失）容易理解</div><div class="line">	非关系型数据库：效率高，不安全（断电丢失）</div><div class="line"></div><div class="line"></div><div class="line">	d</div><div class="line">----关系型数据库---------</div><div class="line">1.什么是关系型数据库？</div><div class="line">	是一种建立在关系模型（数据模型）上的数据库。</div><div class="line">	模型包含三个方面</div><div class="line">		数据结构: 二维表（列和行）</div><div class="line">		操作指令：所有sql语句</div><div class="line">		完整性约束：表（内数据约束），表与表之间约束（外键）</div><div class="line">2.关系型数据库：维护实体内部，实体与实体之间的联系</div><div class="line"></div><div class="line">如果表对应的某个字段没有值，但是系统还是会分配空间！</div><div class="line"></div><div class="line"></div><div class="line">------------关键字说明-------------------</div><div class="line">数据库：database</div><div class="line">数据库系统：DBS（Database system）是一种虚拟系统</div><div class="line">DBMS：database management system 数据库管理系统</div><div class="line">DBA：database administrator，数据库管理员</div><div class="line"></div><div class="line">行/记录：row/record。</div><div class="line">列/字段：column/field.</div><div class="line"></div><div class="line"></div><div class="line">------------------SQL 关系型数据库---------</div><div class="line">SQL:structured query language 结构化查询语言</div><div class="line"></div><div class="line">SQL分为三个部分</div><div class="line">	DDL：datadefinition language ，数据定义语言。</div><div class="line">	DML：数据操作语言；其中DML又分了一个DQL 数据查询语言</div><div class="line">	DCL：数据控制语言。主要负责权限管理（用户）grant，revoke</div><div class="line">	</div><div class="line">	SQL 是一种约束，但不强制（类似W3C）。</div><div class="line">	</div><div class="line"></div><div class="line">------------Mysql数据库-------------</div><div class="line">Mysql数据库是一种c/s结构的软件： 客户端/服务器。</div><div class="line">	(服务器一直运行，客户端在需要使用的时候运行)</div><div class="line">  </div><div class="line">	交换方式：</div><div class="line">		1.客户单链接认证：链接服务器，认证身份：mysql.exe -hpup</div><div class="line">			mysql.exe -hlocalhost -p3306 -uroot -p</div><div class="line">		2.发送SQL指令</div><div class="line">		3.服务器接收SQL指令：处理SQL指令， 返回操作结果</div><div class="line">		4.客户端接收结果：显示结果</div><div class="line">			show databases--查看所有数据库</div><div class="line">		5.断开链接（释放资源，服务器并发限制）</div><div class="line">			exit/quit/\q  退出</div><div class="line">	</div><div class="line">------------------Mysql服务器对象--------------------</div><div class="line"></div><div class="line">将mysql服务器内部对象分成了四层：系统（DBMS）-&gt;数据库（DB）-&gt;数据表（Tabel）-&gt;字段（）</div><div class="line"></div><div class="line">--------------SQL的基本操作--------------</div><div class="line">	基本操作：CRUD</div><div class="line">		SQL的基本操作对象进行分类：</div><div class="line">		库操作，表操作，数据操作</div><div class="line">	</div><div class="line">	</div><div class="line">	基本语法</div><div class="line">	创建库 create </div><div class="line">	Create database 数据库名字[库选项];</div><div class="line">		库选项：用来约束数据库，分为2个选择项</div><div class="line">			字符集设定：charset/character set 具体字符集（存储编码格式）常用的字符集：GBK和UTF8</div><div class="line">			校对集设定：colate 具体校对集</div><div class="line">		</div><div class="line">		</div><div class="line">--------- 创建数据库</div><div class="line">		create database only charset utf8</div><div class="line"></div><div class="line">		-- 创建关键字数据库</div><div class="line">		create database database  charset utf8 </div><div class="line"></div><div class="line">		--（SQL语句保存：只会告诉用户的大概位置，不会说明保存愿意（静默模式））</div><div class="line"></div><div class="line">		--创建中文数据库</div><div class="line">		create database 中国  charset utf8;</div><div class="line"></div><div class="line">		-- 解决方案：告诉服务器当前中文的字符集是什么 中文：GBK</div><div class="line"></div><div class="line">		set names gbk；</div><div class="line">		create database 中国 charset utf8;</div><div class="line"></div><div class="line">		当创建数据库SQL语句执行之后，发送了什么？</div><div class="line">		destiny电脑 保存路径：C:\ProgramData\MySQL\MySQL Server 5.6\data</div><div class="line">		1. 在数据库系统中，增加了对应的数据库信息</div><div class="line">		2. 会在保存数据的文件夹下：data目录，创建一个对应的数据库名称的文件夹</div><div class="line">		3. 每个数据库下都有一个opt文件：保存了库选项</div><div class="line">				--校对集依赖字符集</div><div class="line">--------查看数据库</div><div class="line">		1.查看所有数据库：show databases;</div><div class="line">		2.查看指定的数据库：模糊查询</div><div class="line">			show databases like &apos;pattern&apos;;</div><div class="line">			%:表示匹配多个字符</div><div class="line">			_:表示匹配单个字符</div><div class="line">		3.查看数据库的创建语句：</div><div class="line">			show create database only;</div><div class="line">			show create database ‘database‘;</div><div class="line">			只要需要用到关键字都得用反引号</div><div class="line">			-- 数据库在执行SQL语言之前会优化SQl；</div><div class="line"></div><div class="line">----------更新数据库</div><div class="line">		数据库名字不可以修改</div><div class="line">		</div><div class="line">		数据库的修改选项：字符集合校对集（校对集依赖字符集）</div><div class="line">		</div><div class="line">		alter database 数据库名称[库选项]</div><div class="line">		Charset/charcter set[=]字符集</div><div class="line">		collate 校对集</div><div class="line">		</div><div class="line">		修改数据库    名    字符集</div><div class="line">		alter database only charset gbk; </div><div class="line">		</div><div class="line">-----删除数据库</div><div class="line">		所有的操作中：删除是最简单</div><div class="line">		drop database 数据库名字</div><div class="line">	1.删除数据库之后</div><div class="line">		在数据库内部看不到对应的数据库</div><div class="line">	2.在对应的数据库存储的文件夹内：数据库名字对应的文件夹也被删除</div><div class="line">		（级联删除：里面的数据表全部删除）</div><div class="line">	</div><div class="line">	</div><div class="line">	注意：数据库的删除，不能乱删除。要备份再删除！	</div><div class="line">	</div><div class="line">	</div><div class="line">--------表操作</div><div class="line">		表与字段是密不看可分的。</div><div class="line">		</div><div class="line">		----新增数据表</div><div class="line">		</div><div class="line">		create tabel[if not exists]表名(</div><div class="line">		 字段名字 数据类型，</div><div class="line">		 字段名字 数据类型--最后一行不需要逗号</div><div class="line">		)[表选项]</div><div class="line">			</div><div class="line">			if not exists:如果表名不存在，那么就创建，否则不执行创建代码：检查功能</div><div class="line">			表选项：控制表的表现</div><div class="line">				字符集：charset/character set 具体字符集；</div><div class="line">				校对集：collate 具体校对集；</div><div class="line">				存储引擎：engine 具体的存储引擎（innodb 和 myisam）</div><div class="line">				</div><div class="line">			然后一个表的设计都必须设定数据库</div><div class="line">	创建表1.		</div><div class="line">		careat tabe if not exists （数据库名.）student(</div><div class="line">			name varchar(10),</div><div class="line">			gender varchar(10),</div><div class="line">			number varchar(10),</div><div class="line">			age int</div><div class="line">		)charset utf8;</div><div class="line">	</div><div class="line">	创建表2.</div><div class="line">		进入数据库环境 use 数据库名字；</div><div class="line">			先进入数据库，然后创建表</div><div class="line">			use 表名</div><div class="line">			use only</div><div class="line">			create table class(</div><div class="line">				name varchar(10),</div><div class="line">				room varchar(10),</div><div class="line">				sex varchar(2)</div><div class="line">				</div><div class="line">			)charset utf8;</div><div class="line">			</div><div class="line">		创建表的SQL指令之后发生了什么（多了文件在对应数据库的文件夹下面）</div><div class="line">			1.指定数据库下已经存在对应的表</div><div class="line">			2.在数据库对应的文件夹下，会产生对应表的结构文件（跟存储引擎有关系）</div><div class="line">			</div><div class="line">			</div><div class="line">------------查看数据表-------------------------------------		</div><div class="line">		数据库能查看的分数，表都可以查看</div><div class="line">		</div><div class="line">	1.查看所有表</div><div class="line">		show tables;</div><div class="line">	</div><div class="line">	2.查看部分表 ：</div><div class="line">		模糊匹配 show tables like &apos;%关键字&apos;</div><div class="line">	</div><div class="line">	3.查看表创建语句</div><div class="line">		show create table student\g  ---\g 等价于 分号；</div><div class="line">		show create table student\G  ---\纵向</div><div class="line">		</div><div class="line">	4.查看表结构：查看表中的字段信息</div><div class="line">			Desc / describe /show columns from 表名</div><div class="line">			</div><div class="line">			-- 查看表结构</div><div class="line">			desc class;</div><div class="line">			describe class;</div><div class="line">			show columns from class;</div><div class="line"></div><div class="line">			Type 列表类型</div><div class="line">							字段类型： 数据类型</div><div class="line">			Field 字段名字</div><div class="line">			</div><div class="line">			NULL 列属性 是否允许为空</div><div class="line">			</div><div class="line">			Key  索引类型（PRI主键）UNI唯一等</div><div class="line">			</div><div class="line">			Default  列属性  大部分字段默认为NUll</div><div class="line">			</div><div class="line">			Extra   列属性：扩充（额外的）</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">---------------修改数据表-----------------</div><div class="line">		表本身存在，还包含字段；</div><div class="line">				修改本身和字段</div><div class="line">		</div><div class="line">		--修改表本身</div><div class="line">		</div><div class="line">		表本身可以修改：表名和表选项</div><div class="line">		</div><div class="line">		修改表名：rename table 老表名 to 新表名</div><div class="line">		</div><div class="line">		--修改表选项：字符集，校对集合存储引擎</div><div class="line">		Alter table 表名 charset =GBK;</div><div class="line">		</div><div class="line">		--新增字段</div><div class="line">		Alter table 表名 add[column]字段名  数据类型[列属性][位置];</div><div class="line">			位置：字段名可以存放表中的任意位置</div><div class="line">			First：第一个位置</div><div class="line">			after: 在哪个字段之后：after 字段名 ；默认是在最后一个字段之后</div><div class="line">		</div><div class="line">			alter table my_student</div><div class="line">			add column id int</div><div class="line">			first;</div><div class="line">		</div><div class="line">		--修改字段：通常是修改属性还在数据类型</div><div class="line">		Alter table 表名 modify 字段名 数据类型【位置】【属性】;</div><div class="line">		alter table student </div><div class="line">		modify number char(10) after id; </div><div class="line">	</div><div class="line">		--重命名字段</div><div class="line">		Alter table 表名 change 旧字段 新字段 数据类型【属性】【位置】；</div><div class="line">		</div><div class="line">		--删除字段</div><div class="line">		alter table 表名 drop 字段名；</div><div class="line">		</div><div class="line">	---删除数据表</div><div class="line">		drop table 表名1，表名2；--可以一次性删除多张表；</div><div class="line"></div><div class="line"></div><div class="line">		</div><div class="line">----------------数据操作-----------------		</div><div class="line">	新增数据表</div><div class="line">	1.</div><div class="line">		insert into  表名 values (值，值，值),</div><div class="line">								 (值，值，值)</div><div class="line">		</div><div class="line">	2.</div><div class="line">		给部分字段插入数据</div><div class="line">		insert into 表名（字段列表）values （值，值），（值列表)</div><div class="line">		</div><div class="line">	</div><div class="line">------查看数据</div><div class="line">	select * from 表名： [where 条件]</div><div class="line">	</div><div class="line">	--查看指定字段和条件数据</div><div class="line">	select 字段名 from 表名 条件</div><div class="line"></div><div class="line">-------更新数据</div><div class="line">	Update 表名 set 字段=值  【where 条件】</div><div class="line"></div><div class="line">--------删除</div><div class="line">	delete from 表名 【where 条件】</div><div class="line"> </div><div class="line">-------------------中文数据问题----------------------------------------------------------------------</div><div class="line">查看所有字符集</div><div class="line">	--基本上：服务器是万能，什么字符集都支持</div><div class="line">	show character set;</div><div class="line">	</div><div class="line">	</div><div class="line">	-- 查看服务器默认的处理的字符集</div><div class="line">	show variables like &apos;character_set%&apos;;	</div><div class="line"></div><div class="line">	--修改服务器认为的客户端数据的字符集为：GBK</div><div class="line">	set character_set_client =gbk;</div><div class="line"></div><div class="line">	--修改服务器给定数据的字符集为GBK</div><div class="line">	set character_set_results=GBK；</div><div class="line"></div><div class="line">	快捷方式： set names 字符集</div><div class="line">	set names gbk；</div><div class="line"></div><div class="line">-------------------------------校对集问题---------------------</div><div class="line"></div><div class="line">	校对集：数据比较的方式</div><div class="line">	有三种方式</div><div class="line">		_bin：binary，二进制比较，取出二进制位，一位一位的比较，区分大小写</div><div class="line">		_cs:  case sensitive 区分大小写</div><div class="line">		_ci:  case insensitice 不区分大小写</div><div class="line">		</div><div class="line">	查看数据库所支持的校对集：show collation;</div><div class="line">	</div><div class="line">	--- 创建表使用不同的校对集</div><div class="line">		create table my_collate_bin(</div><div class="line">			name char(1)</div><div class="line">		)charset utf8 collate uft8_bin;</div><div class="line">		</div><div class="line">		create table my_collate_ci(</div><div class="line">			name char(1)</div><div class="line">		)charset utf8 collate uft8_qeneral_ci;</div><div class="line">	</div><div class="line">	--排序查找</div><div class="line">	select * from  表名_bin order by 字段名;</div><div class="line">	select * from  表名_ci order by 字段名：</div><div class="line">	</div><div class="line">-----------------Web乱码问题-------------	</div><div class="line">	</div><div class="line">	动态网页由三个部分构成：</div><div class="line">		浏览器、apache 服务器（PHP）、数据库服务器</div><div class="line">		都有自己的 字符集（中文）</div><div class="line">	</div><div class="line">	统一编码（三码合一）</div></pre></td></tr></table></figure>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1510498472906.jpg" alt="oneNate笔记"></p>
]]></content>
      
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA['linux-mysql']]></title>
      <url>/linux-mysql/</url>
      <content type="html"><![CDATA[<p>特意查看了我的Linux版本<br>$ sudo lsb_release -a<br>显示如下：<br>Distributor ID: Ubuntu<br>Description:    Ubuntu 16.04.1 LTS<br>Release:        16.04<br>Codename:       xenial</p>
<ol>
<li><p>查看3306端口是否正常<br>root@node1:~# netstat -an | grep 3306<br>tcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN<br>注意：现在的3306端口绑定的IP地址是本地的127.0.0.1</p>
</li>
<li><p>修改Mysql配置文件（注意路径，跟之前网上的很多版本位置都不一样）<br>root@node1:~# vim /etc/mysql/mysql.conf.d/mysqld.cnf<br>找到<br>bind-address            = 127.0.0.1<br>前面加#注释掉</p>
</li>
<li><p>重启Mysql<br>root@node1:~# /etc/init.d/mysql restart<br>[ ok ] Restarting mysql (via systemctl): mysql.service.</p>
</li>
<li><p>再次查看端口信息<br>root@node1:~# netstat -an | grep 3306<br>tcp6       0      0 :::3306                 :::*                    LISTEN<br><img src="http://markdown.xiaoshujiang.com/img/spinner.gif" alt="enter description here" title="[[[1510025012246]]]"></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> javaEE </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[aop]]></title>
      <url>/aop/</url>
      <content type="html"><![CDATA[<p>AOP : aspect oriented programming 面向切面</p>
<pre><code>今天的演讲: aop 和oop的区别!
    哎!没有讲好,在这里补充一下!
</code></pre><p>AOP:<br>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。<br>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。<br>使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>
<p>AOP核心概念<br>1、横切关注点<br>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点<br>2、切面（aspect）<br>类是对物体特征的抽象，切面就是对横切关注点的抽象<br>3、连接点（joinpoint）<br>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器<br>4、切入点（pointcut）<br>对连接点进行拦截的定义<br>5、通知（advice）<br>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类<br>6、目标对象<br>代理的目标对象<br>7、织入（weave）<br>将切面应用到目标对象并导致代理对象创建的过程<br>8、引入（introduction）<br>在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段</p>
<p>AOP可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术，把散落在程序中的公共部分提取出来，做成切面类，这样的好处在于，代码的可重用，一旦涉及到该功能的需求发生变化，只要修改该代码就行，否则，你要到处修改，如果只要修改1、2处那还可以接受，万一有1000处呢。<br>      最常用的AOP应用在数据库连接以及事务处理上。<br>      实现模式可能为：代理模式+工厂模式</p>
<p>OOP<br>面向对象编程技术的关键性观念是它将数据及对数据的操作行为放在一起，作为一个相互依存、不可分割的整体——对象。对于相同类型的对象进行分类、抽象后，得出共同的特征而形成了类。面向对象编程就是定义这些类。类是描述相同类型的对象集合。类定义好之后将作为数据类型用于创建类的对象。程序的执行表现为一组对象之间的交互通信。对象之间通过公共接口进行通信，从而完成系统功能。类中声明的<br>public成员组成了对象的对外公共接口。<br><a href="http://oypem0qjb.bkt.clouddn.com/Stone/1509950355159.jpg" target="_blank" rel="external">1</a><br>  简单来说就是以功能为解决问题的中心。</p>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1509950355159.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> javaEE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sping-第一天]]></title>
      <url>/Sping-%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      <content type="html"><![CDATA[<h1 id="Spring-介绍"><a href="#Spring-介绍" class="headerlink" title="Spring 介绍"></a>Spring 介绍</h1><font color="red">!!!Spring是一个分层的一站式轻量级开源框架，也是一个容器框架。</font>

]]></content>
      
        <categories>
            
            <category> Spring框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> javaEE </tag>
            
            <tag> Sping </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java-IO流]]></title>
      <url>/java-IO%E6%B5%81/</url>
      <content type="html"><![CDATA[<pre><code>► File：文件和目录名的抽象表示形式
    ► 类的实例是不可变的
</code></pre><p>构造：<br>    File(File parent,String child);<br>        ► 根据指定的父路径和文件路径创建File对象<br>        new File(File对象路径,”文件名”);<br>    l File(String pathname);<br>        l 将指定的路径名转成一个File对象<br>        new File(“路径+文件名”);<br>    File(String parent,String child);<br>        根据指定的父路径和文件路径创建File对象<br>        new File(“路径”,”文件名”);</p>
<p>J File常用功能:</p>
<pre><code class="java">l 创建功能
        § <span class="function">boolena <span class="title">createNewFile</span><span class="params">()</span></span>;    
        § <span class="function"><span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span>;
        § <span class="function"><span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span>;
    l 删除功能
        § <span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span>;
    l 获取功能
        § <span class="function">File <span class="title">getAbsoluteFIle</span><span class="params">()</span></span>;
        § <span class="function">String <span class="title">getAbsolutePath</span><span class="params">()</span></span>;
        § <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;
        § <span class="function">String <span class="title">getParent</span><span class="params">()</span></span>;
        § <span class="function">File <span class="title">geparentFile</span><span class="params">()</span></span>;
        § <span class="function">String <span class="title">getPath</span><span class="params">()</span></span>;
        § <span class="function"><span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span></span>;
        § <span class="function"><span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span>;
    l 判断功能
        § <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;
        § <span class="function"><span class="keyword">boolean</span> <span class="title">isAnsolute</span><span class="params">()</span></span>;
        § <span class="function">booealn <span class="title">isDirectory</span><span class="params">()</span></span>;
        § <span class="function"><span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span>;
        § <span class="function"><span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span></span>;
    l 修改方法
        § <span class="function"><span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span></span>;
J 绝对路径:固定不可改变的路径,以盘符开头
J 相对路径:相对某个参照物,不能以盘符开头
    <span class="function">l <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span></span>; <span class="comment">//创建文件</span>
    当指定文件不存在的时候创建文件并返回<span class="keyword">true</span>,否则返回<span class="keyword">false</span>

    <span class="function">l <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span> <span class="comment">//创建文件夹</span></span>
<span class="function">        存在<span class="keyword">false</span>,不存在<span class="keyword">true</span></span>
<span class="function"></span>
<span class="function">    l <span class="keyword">boolean</span> <span class="title">delte</span><span class="params">()</span></span>;<span class="comment">//删除文件或者文件夹</span>
        成功<span class="keyword">true</span>,失败<span class="keyword">false</span>
    注意:删除一个文件夹,这个文件夹下面不能有其他的文件和文件夹

    <span class="function">l <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;<span class="comment">//判断文件是否存在</span>

    <span class="function">l <span class="keyword">boolean</span> <span class="title">isAbsolute</span><span class="params">()</span></span>; <span class="comment">//判断FIle对象指向的路径是否是绝对路径</span>
     是    <span class="keyword">true</span>
      否    <span class="keyword">false</span>

    <span class="function">l <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span><span class="comment">//判断File对象指向的路径是否是文件夹</span></span>
<span class="function">        § <span class="keyword">true</span>/<span class="keyword">false</span></span>
<span class="function"></span>
<span class="function">    l <span class="keyword">boolean</span> <span class="title">File</span><span class="params">()</span></span>;<span class="comment">//判断是否是文件</span>

    <span class="function">l <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span></span>;<span class="comment">//判断是否是隐藏文件</span>
----*****************************----
    l 获取功能
    <span class="function">l  File <span class="title">getAbsoluteFile</span><span class="params">()</span></span>;<span class="comment">//获取对象</span>
    <span class="function">l String <span class="title">getAbsolutePath</span><span class="params">()</span></span>;<span class="comment">//返回对像的路径(绝对路劲)</span>
    <span class="function">l  String <span class="title">getParent</span><span class="params">()</span></span>;
        放回创建File对象的时候给的路径
    <span class="function">File <span class="title">getParentFile</span><span class="params">()</span></span>
<span class="function"> <span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span></span>; 返回最后一次修改的时间(毫秒值)

 <span class="function"><span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span>;返回文件的字节数

<span class="function">Boolean <span class="title">renameTo</span><span class="params">(File dest)</span></span>;
    将当期File对象所指向的路径修改为指定File所指向的路径
<span class="comment">//注意:</span>
    修改的文件路径不能存在,如果存在则修改失败
K String[] list();
    返回当前路径下所有的文件和文件夹名称
 !注意:
        只有指向文件夹的File对象才可以调用该方法
K File[] listFiles();
    l 返回的是File[] 
K Static File[] ListRoots();
    l 返回的是一个File[]数组
        File[]里村的是所又佩服
</code></pre>
<pre><code class="java">IO流的分类
            - 流向 
                - 输入流 读取数据 FileReader  父类是：Reader
                - 删除流 写数据     FileWriter      父类是：Writer
            * 数据类型
                - 字节流
                    -  字节输入流  读取数据     InputStream
                     - 字节输出流  写出数据     OutputStream
                + 字符流
                     - 字符输出流    读取数据    Reader
                     - 字符输出流    写出数据 Writer


 字节流
             可以读和写入 不是文本对象的数据 
         字符流
             只能写入和读取，文本对象的数据 (读数据的时候就出现的了问题)
</code></pre>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1509784022629.jpg" alt="Onenote笔记"></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件写入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Session机制Cookie]]></title>
      <url>/2/</url>
      <content type="html"><![CDATA[<p>Session生命周期已经Cookie的区别</p>
<p>简述:<br>    会话(Session)<c醒> 用来跟踪用户的整个回话</c醒></p>
<p>Cookie&lt;哭亏&gt;</p>
<p>而HTTP协议:是一种无状态的协议<br>(无状态就是:对于你之前的操作,处理,没有记忆能力)<br>一旦客户端和服务端数据交换完毕,客户端和服务端的连接就断开了.再次进行数据交互的时候,就需要重新建立连接.这就意味着,服务器无法从连接上同步用户的操作了!</p>
<p>就是用户A 把商品放入购物 是客户端和服务端的一次数据交换<br>然后用户A结账的时候,又是一次数据交换!<br>而在用户进行第二次数据交换的时候,服务端无法判断那个商品属于A!</p>
<p>所以要让服务器端跟踪(同步)用户的操作,就必须引入一种机制.<br>而这种机制就是Cookie</p>
<p>Ø 由于HTTP是一种无状态的协议,服务器无法在网络连接上知道用户的身份.怎么办?<br>这个时候,就给每一个客户端发一个令牌!,每人一个.无论是谁访问都得带上它,而这样服务器就能从令牌上确认用户身份了.<br>这就是Cookie的工作原理</p>
<p>Cookie 机制:<br>    理论上，一个用户的所有请求操作都应该属于同一个会话，而另一个用户的所有请求操作则应该属于另一个会话，二者不能混淆.<br>    例如:<br>        用户A在超市买的任何商品,都应该是放入A的购物车中!<br>        不论用户A 是什么时间买的!<br>        这都属于同一个会话.<br>        不可能你的买的东西,我来付钱,最后的东西还不在我的手上吧!</p>
<pre><code>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。



Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。





Ø Session 机制
Session是服务器端使用的一种记录客户端状态的机制，使用上比Cookie简单一些，相应的也增加了服务器的存储压力。

客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session

客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。

如果说Cookie机制是通过检查客户身上的“令牌”来确定客户身份的话.那么Session机制就是通过检查服务器上的 &quot;身份证档案&quot;就确认用户的身份


Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。





Ø 说一下Session的生命周期
为了获得更高的存取速度，服务器一般把Session放在内存里。每个用户都会有一个独立的Session。如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出



Session在用户第一次访问服务器的时候自动创建。需要注意只有访问JSP、Servlet等程序时才会创建Session

如果尚未生成Session，也可以使用request.getSession(true)强制生成Session

Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间


如果用户过多,那么Session也会多
为防止内存溢出，是不是服务器就得把长时间没有访问过服务器的,Sesion给删除了。
Session的有效时间设置:
通过Session的属性,
maxInactiveInterval(马克思应来特应赌博)
Session的有效时间可以在web.xml中修改
Session的invalidate()方法可以使Session失效。


刚才也说了,Session是存在服务器的内存中的,
如果改变服务器,那么Session就没有了






虽然Session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。
因为Session需要使用Cookie作为识别标志。


Session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID(塞醒ID)的Cookie，它的值为该Session的id（也就是HttpSession.getId()的返回值）。Session依据该Cookie来识别是否为同一用户。



* URL地址重写是对客户端不支持Cookie的解决方案。URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。HttpServletResponse类提供了encodeURL(Stringurl)实现URL地址重写
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cookie 和session 的区别：</div><div class="line"><span class="number">1</span>、cookie数据存放在客户的浏览器上，session数据放在服务器上。</div><div class="line"><span class="number">2</span>、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗</div><div class="line">   考虑到安全应当使用session。</div><div class="line"><span class="number">4</span>、单个cookie保存的数据不能超过<span class="number">4</span>K，很多浏览器都限制一个站点最多保存<span class="number">20</span>个cookie。</div><div class="line">总结:</div><div class="line">	Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。</div></pre></td></tr></table></figure>
<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1509777167000.jpg" alt="Onenote笔记"></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> WEB </tag>
            
            <tag> javaEE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kali linux]]></title>
      <url>/kali-linux/</url>
      <content type="html"><![CDATA[<p><img src="http://oypem0qjb.bkt.clouddn.com/Stone/1509776887624.jpg" alt="黑可系统"></p>
]]></content>
      
        <categories>
            
            <category> kali 黑客系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java开发常用架包]]></title>
      <url>/1/</url>
      <content type="html"><![CDATA[<font face="黑体" color="  #63B8FF "><br> 常用架包<br><br> java开发中主要用到的jar包描述<br><em> commons-io.jar：<br>可以看成是java.io的扩展，用来帮助进行IO功能开发．它包含三个主要的领域:Utilityclasses-提供一些静态方法来完成公共任务．Filters-提供文件过滤器的各种实现．Streams-提供实用的Stream，reader与writer实现．<br>commons-beanutils.jar：<br>提供对Java反射和自省API的包装，主要提供了对于JavaBean进行各种操作。<br>commons-digester.jar:<br>它能方便地将XML文档所定义的元素转化为JAVA对象，其实它的用法有点象栈(当然内在的原理就是那个古老的东西,只是提供了更高一层的封装)。<br>commons-lang.jar:<br>它扩展了标准java.langAPI，增加了字符串操作方法、基本数值方法、对象反射、创建和串行化以及System属性。它还包含一个可继承的enum类型、对多种嵌套的Exception类型的支持、对java.util.Date的增强以及用于构建方法的实用程序，例如自动生成toString()的结果、自动实现hashCode()和equals()方法、数组操作、枚举、日期和时间的处理等等。<br>• ArrayUtils–用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等；<br>• BitField–用于操作位元，提供了一些方便而安全的方法；<br>• BooleanUtils–用于操作和转换boolean或者Boolean及相应的数组；<br>• CharEncoding–包含了Java环境支持的字符编码，提供是否支持某种编码的判断；<br>• CharRange–用于设定字符范围并做相应检查；<br>• CharSet–用于设定一组字符作为范围并做相应检查；<br>• CharSetUtils–用于操作CharSet；<br>• CharUtils–用于操作char值和Character对象；<br>• ClassUtils–用于对Java类的操作，不使用反射；<br>• ObjectUtils–用于操作Java对象，提供null安全的访问和其他一些功能；<br>• RandomStringUtils–用于生成随机的字符串；<br>• SerializationUtils–用于处理对象序列化，提供比一般Java序列化更高级的处理能力；<br>• StringEscapeUtils–用于正确处理转义字符，产生正确的Java、JavaScript、HTML、XML和SQL代码；<br>• StringUtils–处理String的核心类，提供了相当多的功能；<br>• SystemUtils–在java.lang.System基础上提供更方便的访问，如用户路径、Java版本、时区、操作系统等判断；<br>• Validate–提供验证的操作，有点类似assert断言；<br>• WordUtils–用于处理单词大小写、换行等。<br>commons-codec.jar：<br>包含一些通用的编码解码算法。包括一些语音编码器，Hex,Base64,以及URLencoder。<br>commons-collections.jar：<br>提供一个类包来扩展和增加标准的JavaCollection框架。<br>• Bag接口：适用于包含一个对象的多个拷贝的集合<br>• Buffer接口：适用于具有顺序的集合类，例如FIFOs(先进先出)<br>• BidiMap(双向映射)：可以通过值查找键，也可以通过键查找值<br>• Map迭代器：提供了对映射的快速迭代<br>• 对类型检查进行了封装，确保特定类的实例可以被添加到集合中<br>• 对转换进行了封装，将集合中的对象转换成被加入时的类型<br>• 对集合进行组合，使多个集合看起来就像一个集合一样<br>• 有序映射和set，保持元素添加时的顺序，包括一个基于LRU的map<br>• 标识映射可以给予对象的==来比较对象，而不是基于equals方法<br>• 引用映射可以允许键and/or值可以有控制的进行回收<br>• 很多比较器的实现<br>• 很多迭代器的实现<br>• 从数组或者枚举到集合的适配器<br>• 用来测试或者创建典型set理论的集合属性，例如与、或、闭包<br>commons-dbutil.jar:<br>对传统操作数据库的类进行二次封装，可以把结果集转化成List<br>(1)org.apache.commons.dbutils<br>DbUtils :提供如关闭连接、装载JDBC驱动程序等常规工作的工具类<br>QueryRunner:该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。<br>QueryLoader:属性文件加载器，主要用于加载属性文件中的SQL到内存中。<br>(2)org.apache.commons.dbutils.handlers<br>ArrayHandler：将ResultSet中第一行的数据转化成对象数组ArrayListHandler将ResultSet中所有的数据转化成List，List中存放的是Object[]<br>BeanHandler：将ResultSet中第一行的数据转化成类对象<br>BeanListHandler：将ResultSet中所有的数据转化成List，List中存放的是类对象<br>ColumnListHandler：将ResultSet中某一列的数据存成List，List中存放的是Object对象<br>KeyedHandler：将ResultSet中存成映射，key为某一列对应为Map。Map中存放的是数据<br>MapHandler：将ResultSet中第一行的数据存成Map映射<br>MapListHandler：将ResultSet中所有的数据存成List。List中存放的是Map<br>ScalarHandler：将ResultSet中一条记录的其中某一列的数据存成Object<br><br>java开发中主要用到的jar包总结<br>axis.jar:SOAP引擎包<br>jaxrpc.jar:Axis运行所需要的组件包<br>saaj.jar:创建到端点的点到点连接的方法、创建并处理SOAP消息和附件的方法，以及接收和处理SOAP错误的方法.<br>wsdl4j-1.5.1.jar:Axis运行所需要的组件包<br>activation.jar:JAF框架的jar包<br>annotations-api.jar:使用注解所需jar<br>ant.jar:用于自动化调用程序完成项目的编译，打包，测试等<br>aopalliance-1.0.jar:支持Spring AOP<br>asm-2.2.3.jar:ASM字节码库<br>asm-commons-2.2.3.jar:ASM字节码库<br>asm-util-2.2.3.jar:Java字节码操纵和分析框架<br>aspectjrt.jar:处理事务和AOP所需的包<br>aspectjweaver.jar:处理事务和AOP所需的包<br>axiom-api-1.2.7.jar:Axis 对象模型<br>axiom-impl-1.2.7.jar:Axis 对象模型<br><br>bcprov-jdk15-140.jar:基于java1.5 的加密算法实现<br>bfmclientmodel.jar:使用WebSphere所需jar包<br>bpcclientcore.jar:使用WebSphere所需jar包<br>bpe137650.jar:提供远程访问BPE容器的实现。<br>bsh-2.0b4.jar:解决负载逻辑运算<br><br>c3p0-0.9.0.jar:开放源代码的JDBC连接池<br>cglib-nodep-2.1_3.jar:Spring中自动代理所需jar包<br>cobertura.jar:测量测试覆盖率<br>commons-beanutils-1.7.0.jar:动态的获取/设值Java Bean的属性<br>commons-chain-1.1.jar:实现责任链设计模式的Java 类库<br>commons-codec-1.3.jar:用来处理常用的编码方法的工具类包，例如DES、SHA1、MD5、Base64等等<br>commons-collections-3.1.jar:对标准java Collection的扩展<br>commons-collections.jar:对标准java Collection的扩展<br>commons-discovery-0.2.jar:用来发现、查找和实现可插入式接口，提供一些一般类实例化、单件的生命周期管理的常用方法.db2jcc.jarjava连接DB2所需jar<br>commons-digester-1.8.jar:用于处理struts-config.xml配置文件<br>commons-fileupload-1.1.1.jar:struts上传文件<br>commons-httpclient-3.1.jar:用来简化HTTP客户端与服务器端进行各种通信编程实现<br>commons-io-1.1.jar:针对java.io.InputStream和Reader进行了扩展<br>commons-lang-2.4.jar:对java.lang.</em>的扩展<br>commons-logging-1.1.1.jar:日志包<br>commons-pool-1.3.jar:实现对象池化框架<br>commons-validator-1.3.1.jar:用来把验证规则程序提取出来，以供重复使用<br><br>db2jcc_license_cu.jar:java:连接DB2所需jar<br>dom4j-1.6.1.jar:解析XML<br><br>ehcache-1.2.4.jar:hibernate的二级缓存如果用ehcache的时候需要此jar包<br>emf.jar:基于Eclipse的模型框架<br>ezmorph-1.0.6.jar:使用JSON所需的jar包<br><br>FastInfoset-1.2.2.jar:使用WebService所需的jar包<br>freemarker-2.3.8.jar:Strus2支持的一种表现层框架<br><br>geronimo-activation_1.1_spec-1.0.2.jar:Apache Geronimo所带jar包，<br>geronimo-annotation_1.0_spec-1.1.1.jar:Apache Geronimo所带jar包<br>geronimo-javamail_1.4_spec-1.3.jar:Apache Geronimo所带jar包<br>geronimo-jaxws_2.1_spec-1.0.jar:Apache Geronimo所带jar包<br>geronimo-jms_1.1_spec-1.1.1.jar:Apache Geronimo所带jar包<br>geronimo-servlet_2.5_spec-1.2.jar:Apache Geronimo所带jar包<br>geronimo-stax-api_1.0_spec-1.0.1.jar:Apache Geronimo所带jar包<br><br>hibernate3.jar:Hibernate3的核心jar包<br>htmclientmodel.jar:使用WebSphere所需jar包<br><br>jakarta-oro.jar:一套文本处理工具，提供per15.0兼容的表达式，AWK-like表达式，Glob表达式。<br>javassist.jar:Javassist 字节码解释器<br>jaxb-api-2.1.jar:使用WebService所需的jar包<br>jaxb-impl-2.1.7.jar:使用CXF所需jar包<br>jaxb-xjc-2.1.7.jar:使用CXF所需jar包<br>jaxen-1.1.1.jar:解析XML<br>jcifs-1.2.22.jar:实现单点登陆<br>jdom2-1.0.jar:解析XML<br>jdom-1.0.jar:解析XML<br>jettison-1.0.1.jar:使用CXF所需jar包<br>jetty-6.1.9.jar:Jetty Http服务器jar<br>jetty-util-6.1.9.jar:Jetty Http服务器jar<br>jra-1.0-alpha-4.jar:使用CXF所需jar包<br>js-1.6R7.jar:使用CXF所需jar包<br>json-lib-2.2.3-jdk13.jar:使用JSON所需的jar包<br>jsonplugin-0.25.jar:strus2的JSON插件<br>jsr311-api-0.8.jar:使用CXF所需jar包<br>jstl.jar:JSTL标签库<br>jta.jar:标准的 JAVA 事务处理接口<br>junit.jar:用于单元测试<br>jxl.jar:通过java操作excel表格的工具类库<br>ldap.jar:JNDI目录服务和LDAO服务器所需的jar<br>ldapbp.jar:JNDI目录服务和LDAO服务器所需的jar<br><br>log4j-1.2.15.jar:提供日志功能<br><br>mail.jar:java发送邮件jar包<br><br>neethi-2.0.4.jar:使用CXF所需jar包<br><br>odmg-3.0.jar:ODMG是一个ORM的规范，Hibernate实现了ODMG规范，这是一个核心的库<br>ognl-2.6.11.jar:struts2中OGNL语言<br>ojdbc14.jar:Oracle数据库驱动包<br>opensaml-1.1.jar:使用CXF所需jar包<br>oro-2.0.8.jar:Validator框架所需的jar包<br>oscache-2.1.jar:Java 对象的缓存工具<br><br>poi-3.1-FINAL-20080629.jar:操作exce所需jar包<br>poi-contrib-3.1-FINAL-20080629.jar:操作exce所需jar包<br>poi-ooxml-3.6-20091214.jar:提供对office的word、excel、visio及ppt的操作<br>poi-ooxml-schemas-3.6-20091214.jar:提供对office的word、excel、visio及ppt的操作<br>poi-scratchpad-3.1-FINAL-20080629.jar:提供对office的word、excel、visio及ppt的操作<br>processCommon.jarIBM WebSphere:运行所需jar<br>ProcessCommonLibrary.jarIBM WebSphere:运行所需jar<br>processIdentity.jarIBM WebSphere:运行所需jar<br>ProcessInformation.jar:进程监视软件包<br>proxool-0.9.1.jar:数据库连接池<br>proxool-cglib.jar:数据库连接池<br><br>quartz-1.6.0.jar:开源作业调度框架<br><br>saaj-api-1.3.jar:使用axis所需的jar<br>saaj-impl-1.3.2.jar:使用axis所需的jar<br>serializer-2.7.1.jar:XML序列化<br>slf4j-jdk14-1.5.6.jar:整合各种日志框架的工具<br>spring208.jar:spring核心框架<br>spring-ldap-1.2-RC1.jar:spring下LDAP<br>spring-mock.jar:spring的测试框架<br>standard.jar:使用JSTL标签库所需的jar<br>stax-api-1.0.1.jar:解析XML<br>struts2-core-2.0.14.jar:struts2核心jar<br>struts2-spring-plugin-2.0.6.jar:struts2整合Spring所需jar<br><br>taglibs-datetime.jar:Apache开源组织提供标签库，用于格式化日期。<br>taglibs-mailer.jar:用于发送邮件<br>taglibs-string.jar:Apache开源组织提供标签库，用于对String的操作。<br>task137650.jar:Portal技术在SOA系统集成应用中实现所需的jar<br><br>utility.jar:Apache开源组织提供标签库<br><br>velocity-1.5.jar:一个免费的开源模板框架<br><br>wsdl4j-1.6.2.jar:用来解析服务的WSDl文件<br>wss4j-1.5.4.jar:创建CXF所需jar<br>wstx-asl-3.2.6.jar:创建CXF所需jar<br><br>xbean-spring-2.8.jar:使用xfire所需jar<br>xerces-2.6.2.jar:XML解析器<br>xfire-all-1.2.6.jar:用于实现WebService<br>XmlSchema-1.1.jar:使用xfire所需jar<br>xwork-2.0.7.jar:WebWork核心jar<br><br></font>

]]></content>
      
        
    </entry>
    
  
  
</search>
